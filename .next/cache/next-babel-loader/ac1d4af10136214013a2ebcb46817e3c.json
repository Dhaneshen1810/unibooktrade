{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\danmo\\\\book-trade\\\\pages\\\\booklist.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { withRouter } from \"next/router\";\nimport Link from 'next/link'; //Getting book data from database\n\nimport fetch from 'isomorphic-unfetch';\nimport { useState, useEffect } from 'react';\nvar posts = withRouter(_s(function (_ref) {\n  _s();\n\n  var _ref$router$query = _ref.router.query,\n      mytitle = _ref$router$query.mytitle,\n      author = _ref$router$query.author;\n\n  var _useState = useState(),\n      books = _useState[0],\n      setBooks = _useState[1];\n\n  useEffect(function () {\n    getBooks().then(function (data) {\n      return setItems(data);\n    });\n  }, []);\n  var itemsToRender;\n\n  if (books) {\n    itemsToRender = books.map(function (item) {\n      return __jsx(\"div\", {\n        key: book._id,\n        className: \"book-item\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }\n      }, __jsx(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }\n      }, \"Title: \", book.title), __jsx(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }\n      }, \"Author: \", book.author));\n    });\n  } else {\n    itemsToRender = \"Loading...\";\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }\n    }, \"Loading\"));\n  }\n  /*\r\n    return(\r\n    \r\n      \r\n    <div>\r\n  \r\n    \r\n            \r\n        \r\n        <div className='book-greeting'>\r\n            <div className='greeting-text'>\r\n                <p>Find your book by entering \r\n                    the <b>Author</b> or <b>Book name\r\n                        below.\r\n                    </b>\r\n                </p>\r\n            </div>\r\n            \r\n        </div>\r\n        \r\n        <div className='book-list'>\r\n              \r\n        {/*}        {books.map( book => {\r\n            \r\n           \r\n            //if (mytitle=='' && author==''){\r\n                return (\r\n                    <div key={book._id} className='book-item'>\r\n                        <p>Title: {book.title}</p>\r\n                        <p>Author: {book.author}</p>\r\n                        \r\n                    </div>\r\n                )\r\n            \r\n        })}\r\n    }\r\n      \r\n    \r\n        </div>        \r\n    </div>\r\n  )\r\n  */\n\n}, \"sKszovI4RjUxaVOsSuPavOYWObw=\"));\nposts.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var res, _yield$res$json, data;\n\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return fetch('http://localhost:3000/api/books');\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return res.json();\n\n        case 5:\n          _yield$res$json = _context.sent;\n          data = _yield$res$json.data;\n          return _context.abrupt(\"return\", {\n            books: data\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default posts;","map":{"version":3,"sources":["C:/Users/danmo/book-trade/pages/booklist.js"],"names":["withRouter","Link","fetch","useState","useEffect","posts","router","query","mytitle","author","books","setBooks","getBooks","then","data","setItems","itemsToRender","map","item","book","_id","title","getInitialProps","res","json"],"mappings":";;;;;;;;;AAAA,SAASA,UAAT,QAA2B,aAA3B;AACA,OAAOC,IAAP,MAAiB,WAAjB,C,CAEA;;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAKA,IAAMC,KAAK,GAAGL,UAAU,IAAC,gBAA6C;AAAA;;AAAA,+BAA1CM,MAA0C,CAA/BC,KAA+B;AAAA,MAAxBC,OAAwB,qBAAxBA,OAAwB;AAAA,MAAfC,MAAe,qBAAfA,MAAe;;AAAA,kBAExCN,QAAQ,EAFgC;AAAA,MAE3DO,KAF2D;AAAA,MAEpDC,QAFoD;;AAIlEP,EAAAA,SAAS,CAAC,YAAM;AACdQ,IAAAA,QAAQ,GAAGC,IAAX,CAAgB,UAAAC,IAAI;AAAA,aAAIC,QAAQ,CAACD,IAAD,CAAZ;AAAA,KAApB;AACD,GAFQ,EAEN,EAFM,CAAT;AAKA,MAAIE,aAAJ;;AACF,MAAIN,KAAJ,EAAW;AACTM,IAAAA,aAAa,GAAGN,KAAK,CAACO,GAAN,CAAU,UAAAC,IAAI,EAAI;AAC9B,aACI;AAAK,QAAA,GAAG,EAAEC,IAAI,CAACC,GAAf;AAAoB,QAAA,SAAS,EAAC,WAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAWD,IAAI,CAACE,KAAhB,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAYF,IAAI,CAACV,MAAjB,CAFJ,CADJ;AAOH,KARe,CAAhB;AASD,GAVD,MAUO;AACLO,IAAAA,aAAa,GAAG,YAAhB;AACA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,CADJ;AAKD;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CD,CAzEuB,kCAAxB;AA+EAX,KAAK,CAACiB,eAAN,yEAAwB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACFpB,KAAK,CAAC,iCAAD,CADH;;AAAA;AACdqB,UAAAA,GADc;AAAA;AAAA,iBAEGA,GAAG,CAACC,IAAJ,EAFH;;AAAA;AAAA;AAEZV,UAAAA,IAFY,mBAEZA,IAFY;AAAA,2CAId;AAAEJ,YAAAA,KAAK,EAAEI;AAAT,WAJc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;AAQA,eAAeT,KAAf","sourcesContent":["import { withRouter } from \"next/router\";\r\nimport Link from 'next/link';\r\n\r\n//Getting book data from database\r\nimport fetch from 'isomorphic-unfetch';\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\n\r\n\r\n\r\nconst posts = withRouter(({ router:  { query:{mytitle, author}}} ) => {\r\n\r\n    const [books, setBooks] = useState();\r\n\r\n    useEffect(() => {\r\n      getBooks().then(data => setItems(data));\r\n    }, []);\r\n\r\n\r\n    let itemsToRender;\r\n  if (books) {\r\n    itemsToRender = books.map(item => {\r\n        return (\r\n            <div key={book._id} className='book-item'>\r\n                <p>Title: {book.title}</p>\r\n                <p>Author: {book.author}</p>\r\n                \r\n            </div>\r\n        )\r\n    });\r\n  } else {\r\n    itemsToRender = \"Loading...\";\r\n    return(\r\n        <div>\r\n            <p>Loading</p>\r\n        </div>\r\n    )\r\n  }\r\n  /*\r\n    return(\r\n    \r\n\r\n    \r\n    <div>\r\n\r\n\r\n    \r\n            \r\n        \r\n        <div className='book-greeting'>\r\n            <div className='greeting-text'>\r\n                <p>Find your book by entering \r\n                    the <b>Author</b> or <b>Book name\r\n                        below.\r\n                    </b>\r\n                </p>\r\n            </div>\r\n            \r\n        </div>\r\n        \r\n        <div className='book-list'>\r\n              \r\n        {/*}        {books.map( book => {\r\n            \r\n           \r\n            //if (mytitle=='' && author==''){\r\n                return (\r\n                    <div key={book._id} className='book-item'>\r\n                        <p>Title: {book.title}</p>\r\n                        <p>Author: {book.author}</p>\r\n                        \r\n                    </div>\r\n                )\r\n            \r\n        })}\r\n    }\r\n\r\n    \r\n    \r\n        </div>        \r\n    </div>\r\n)\r\n*/\r\n});\r\n\r\n\r\n\r\n\r\n\r\nposts.getInitialProps = async () =>{\r\n    const res = await fetch('http://localhost:3000/api/books');\r\n    const { data } = await res.json();\r\n\r\n    return{ books: data }\r\n}\r\n\r\n    \r\nexport default posts;"]},"metadata":{},"sourceType":"module"}