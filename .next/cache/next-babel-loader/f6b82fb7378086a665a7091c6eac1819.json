{"ast":null,"code":"import dbConnect from '../../../utils/dbConnect';\nimport Book from '../../../modals/book';\ndbConnect();\nconsole.log('inside the main book ');\nexport default (async (req, res) => {\n  const {\n    method\n  } = req;\n  console.log('method is ' + method);\n  var myTitle = req.headers.title;\n  var myAuthor = req.headers.author;\n\n  if (req.body.id) {\n    console.log('id present.');\n    const myID = req.body.id;\n    myTitle = req.body.title;\n    myAuthor = req.body.author; //const ownerID = req.body.ownerID;\n\n    console.log(req.body);\n  }\n\n  console.log('title is ' + myTitle);\n  console.log('author is ' + myAuthor); //console.log(req.body.imageFront.data[0]);\n  // In case we have only the author as input, we will looking\n  // for all books with that author\n\n  if (myTitle == '' && myAuthor != '') {\n    console.log('No title');\n\n    switch (method) {\n      case 'GET':\n        try {\n          const books = await Book.find({\n            //Sort here\n            //'title': myTitle\n            'author': myAuthor\n          });\n          res.status(200).json({\n            success: true,\n            data: books\n          });\n        } catch (error) {\n          res.status(400).json({\n            success: false\n          });\n          console.log('Author not found');\n        }\n\n        break;\n\n      case 'POST':\n        try {\n          const book = await Book.create(req.body);\n          console.log('post');\n          console.log(req.body);\n          res.status(201).json({\n            success: true,\n            data: book\n          });\n        } catch (error) {\n          res.status(400).json({\n            success: false\n          });\n          console.log(\"couldn't post 1\");\n        }\n\n        break;\n\n      default:\n        res.status(400).json({\n          success: false\n        });\n        break;\n    }\n  } //In case only the title is given as input,\n  // Look for all books with that title\n  else if (myAuthor == '' && myTitle != '') {\n      console.log('No author');\n\n      switch (method) {\n        case 'GET':\n          try {\n            const books = await Book.find({\n              //Sort here\n              'title': myTitle //'author': 'Robert Kiyosaki'\n\n            });\n            res.status(200).json({\n              success: true,\n              data: books\n            });\n          } catch (error) {\n            res.status(400).json({\n              success: false\n            });\n            console.log('Title not found');\n          }\n\n          break;\n\n        case 'POST':\n          try {\n            const book = await Book.create(req.body);\n            console.log('post');\n            console.log(req.body);\n            res.status(201).json({\n              success: true,\n              data: book\n            });\n          } catch (error) {\n            res.status(400).json({\n              success: false\n            });\n            console.log(\"couldn't post 2\");\n          }\n\n          break;\n\n        default:\n          res.status(400).json({\n            success: false\n          });\n          break;\n      }\n    } // User input both the title and the author\n    // Return book matching both\n    else if (myTitle != '' && myAuthor != '') {\n        console.log('my title is: ' + myTitle);\n        console.log('my author is: ' + myAuthor);\n\n        switch (method) {\n          case 'GET':\n            try {\n              const books = await Book.find({\n                //Sort here\n                'title': myTitle,\n                'author': myAuthor\n              });\n              console.log('books are ready');\n              res.status(200).json({\n                success: true,\n                data: books\n              });\n            } catch (error) {\n              res.status(400).json({\n                success: false\n              });\n            }\n\n            break;\n\n          case 'POST':\n            try {\n              const book = await Book.create(req.body); //var str = req.body.imageFront;\n              //var str = req.body.imageFront.data;\n              //console.log(str)\n\n              res.status(201).json({\n                success: true,\n                data: book\n              });\n            } catch (error) {\n              res.status(400).json({\n                success: false\n              });\n              console.log(\"couldn't post 3\");\n              console.log('Failed: ' + myTitle + ' ' + myAuthor);\n            }\n\n            break;\n\n          case 'PUT':\n            try {\n              const book = await Book.findByIdAndUpdate(req.body.id, req.body, {\n                new: true,\n                runValidators: true\n              });\n\n              if (!book) {\n                return res.status(400).json({\n                  success: '!book'\n                });\n              }\n\n              res.status(200).json({\n                success: true,\n                data: book\n              });\n            } catch (error) {\n              res.status(400).json({\n                success: false\n              });\n            }\n\n            break;\n\n          default:\n            res.status(400).json({\n              success: false\n            });\n            break;\n        }\n      } // There is no given title and author\n      // We return all books available\n      else if (myTitle == '' && myAuthor == '') {\n          console.log('in number 4');\n\n          switch (method) {\n            case 'GET':\n              console.log(req.headers.bookid);\n\n              if (req.headers.id) {\n                // bookID has been provided\n                // We will use bookID to find book\n                if (req.headers.bookid) {\n                  try {\n                    console.log('Book id present');\n                    const books = await Book.find({\n                      _id: req.headers.bookid\n                    });\n                    console.log('Got books');\n                    res.status(200).json({\n                      success: true,\n                      data: books\n                    });\n                  } catch (error) {\n                    res.status(400).json({\n                      success: false\n                    });\n                  }\n                } // No book id is provided\n                // Get all books from the owner\n                else {\n                    try {\n                      console.log('Book id not present');\n                      const books = await Book.find({\n                        ownerID: req.headers.id\n                      });\n                      console.log('Got books');\n                      res.status(200).json({\n                        success: true,\n                        data: books\n                      });\n                    } catch (error) {\n                      res.status(400).json({\n                        success: false\n                      });\n                    }\n                  }\n              } else {\n                try {\n                  const books = await Book.find({});\n                  res.status(200).json({\n                    success: true,\n                    data: books\n                  });\n                } catch (error) {\n                  res.status(400).json({\n                    success: false\n                  });\n                }\n              }\n\n              break;\n\n            case 'POST':\n              try {\n                const book = await Book.create(req.body);\n                console.log('post');\n                console.log(req.body);\n                res.status(201).json({\n                  success: true,\n                  data: book\n                });\n              } catch (error) {\n                res.status(400).json({\n                  success: false\n                });\n                console.log(\"couldn't post 4\");\n              }\n\n              break;\n            //Deleting book post here instead of in [id].js\n\n            case 'DELETE':\n              console.log('Attempting to delete: ' + req.body.id);\n\n              try {\n                const deletedBook = await Book.deleteOne({\n                  _id: req.body.id\n                });\n\n                if (!deletedBook) {\n                  return res.status(400).json({\n                    success: false\n                  });\n                }\n\n                res.status(200).json({\n                  success: true,\n                  data: {}\n                });\n              } catch (error) {\n                return res.status(400).json({\n                  success: 'some error happenn'\n                });\n              }\n\n            default:\n              res.status(400).json({\n                success: false\n              });\n              break;\n          }\n        }\n});","map":{"version":3,"sources":["C:/Users/danmo/book-trade/pages/api/books/index.js"],"names":["dbConnect","Book","console","log","req","res","method","myTitle","headers","title","myAuthor","author","body","id","myID","books","find","status","json","success","data","error","book","create","findByIdAndUpdate","new","runValidators","bookid","_id","ownerID","deletedBook","deleteOne"],"mappings":"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","sourcesContent":["import dbConnect from '../../../utils/dbConnect';\r\nimport Book from '../../../modals/book';\r\n\r\ndbConnect();\r\n\r\nconsole.log('inside the main book ')\r\n\r\n\r\n\r\nexport default async (req, res) => {\r\n\r\n \r\n    const { method } = req; \r\n\r\n    console.log('method is '+ method)\r\n\r\n\r\n    \r\n\r\n    var myTitle = req.headers.title;\r\n    var myAuthor = req.headers.author;\r\n\r\n    if (req.body.id){\r\n        console.log('id present.')\r\n        const myID = req.body.id;\r\n        myTitle = req.body.title;\r\n        myAuthor = req.body.author;\r\n        //const ownerID = req.body.ownerID;\r\n        console.log(req.body);\r\n\r\n    }\r\n    \r\n\r\n    console.log('title is '+myTitle);\r\n    console.log('author is '+ myAuthor);\r\n    //console.log(req.body.imageFront.data[0]);\r\n\r\n\r\n   \r\n    // In case we have only the author as input, we will looking\r\n    // for all books with that author\r\n    if (myTitle=='' && myAuthor!=''){\r\n        console.log('No title')\r\n\r\n        switch(method){\r\n            case 'GET':\r\n                try {\r\n                    \r\n                    const books = await Book.find({\r\n                        //Sort here\r\n                        //'title': myTitle\r\n                        'author': myAuthor\r\n                    });\r\n                    \r\n                    \r\n    \r\n                    res.status(200).json({ success: true, data: books })\r\n                } catch (error) {\r\n                    res.status(400).json({ success: false }); \r\n\r\n                    console.log('Author not found');\r\n                }\r\n                \r\n                break;\r\n            case 'POST':\r\n                try {\r\n                    const book = await Book.create(req.body);\r\n                    console.log('post');\r\n                    console.log(req.body);\r\n    \r\n                    res.status(201).json({ success: true, data: book })\r\n                } catch (error) {\r\n                    res.status(400).json({ success: false });\r\n                    console.log(\"couldn't post 1\");\r\n                    \r\n                }\r\n                break;\r\n            default:\r\n                res.status(400).json({ success: false });\r\n                break;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //In case only the title is given as input,\r\n    // Look for all books with that title\r\n    else if (myAuthor=='' && myTitle!=''){\r\n        console.log('No author');\r\n\r\n        switch(method){\r\n            case 'GET':\r\n                try {\r\n                    \r\n                    const books = await Book.find({\r\n                        //Sort here\r\n                        'title': myTitle\r\n                        //'author': 'Robert Kiyosaki'\r\n                    });\r\n                    \r\n    \r\n                    res.status(200).json({ success: true, data: books })\r\n                } catch (error) {\r\n                    res.status(400).json({ success: false });\r\n\r\n                    console.log('Title not found');\r\n                }\r\n                \r\n                break;\r\n            case 'POST':\r\n                try {\r\n                    const book = await Book.create(req.body);\r\n                    console.log('post');\r\n                    console.log(req.body);\r\n    \r\n                    res.status(201).json({ success: true, data: book })\r\n                } catch (error) {\r\n                    res.status(400).json({ success: false });\r\n                    console.log(\"couldn't post 2\");\r\n                    \r\n                }\r\n                break;\r\n            default:\r\n                res.status(400).json({ success: false });\r\n                break;\r\n        }\r\n    }\r\n\r\n    // User input both the title and the author\r\n    // Return book matching both\r\n    else if (myTitle!='' && myAuthor!=''){\r\n        console.log('my title is: '+ myTitle);\r\n        console.log('my author is: '+ myAuthor);\r\n        switch(method){\r\n            case 'GET':\r\n                try {\r\n\r\n                    const books = await Book.find({\r\n                        //Sort here\r\n                        'title': myTitle,\r\n                        'author': myAuthor\r\n                    });\r\n                    console.log('books are ready')\r\n    \r\n                    res.status(200).json({ success: true, data: books })\r\n                } catch (error) {\r\n                    res.status(400).json({ success: false });\r\n                }\r\n                \r\n                break;\r\n            case 'POST':\r\n                try {\r\n                    const book = await Book.create(req.body);\r\n                    //var str = req.body.imageFront;\r\n                    //var str = req.body.imageFront.data;\r\n                    //console.log(str)\r\n    \r\n                    res.status(201).json({ success: true, data: book })\r\n                } catch (error) {\r\n                    res.status(400).json({ success: false });\r\n                    console.log(\"couldn't post 3\");\r\n                    console.log('Failed: '+myTitle+' '+myAuthor);\r\n                    \r\n                }\r\n                break;\r\n            case 'PUT':\r\n                try {\r\n                    const book = await Book.findByIdAndUpdate(req.body.id, req.body, {\r\n                        new: true,\r\n                        runValidators: true\r\n                      });\r\n              \r\n                      if (!book){\r\n                        return res.status(400).json({ success: '!book' });\r\n                      }\r\n\r\n                      res.status(200).json({ success: true, data: book });\r\n                } catch (error) {\r\n                    res.status(400).json({ success: false });\r\n                }\r\n                break;\r\n            default:\r\n                res.status(400).json({ success: false });\r\n                break;\r\n        }\r\n    }\r\n    \r\n\r\n    // There is no given title and author\r\n    // We return all books available\r\n    else if (myTitle=='' && myAuthor==''){\r\n        console.log('in number 4')\r\n        switch(method){\r\n            \r\n            case 'GET':\r\n                console.log(req.headers.bookid)\r\n                if (req.headers.id){\r\n                    // bookID has been provided\r\n                    // We will use bookID to find book\r\n                    if(req.headers.bookid){\r\n                        try {\r\n                            console.log('Book id present')\r\n        \r\n                            const books = await Book.find({\r\n                                _id: req.headers.bookid\r\n                            });\r\n        \r\n                            console.log('Got books');\r\n                            \r\n            \r\n                            res.status(200).json({ success: true, data: books })\r\n                        } catch (error) {\r\n                            res.status(400).json({ success: false });\r\n                        }\r\n                    }\r\n                    // No book id is provided\r\n                    // Get all books from the owner\r\n                    else{\r\n                        try {\r\n                            console.log('Book id not present')\r\n        \r\n                            const books = await Book.find({\r\n                                ownerID: req.headers.id\r\n                            });\r\n        \r\n                            console.log('Got books');\r\n                            \r\n            \r\n                            res.status(200).json({ success: true, data: books })\r\n                        } catch (error) {\r\n                            res.status(400).json({ success: false });\r\n                        }\r\n\r\n                    }\r\n\r\n            }\r\n            else{\r\n                \r\n                try {\r\n                    \r\n                    const books = await Book.find({\r\n                    });\r\n                    \r\n    \r\n                    res.status(200).json({ success: true, data: books })\r\n                } catch (error) {\r\n                    res.status(400).json({ success: false });\r\n                }\r\n            }\r\n                \r\n                break;\r\n            case 'POST':\r\n                try {\r\n                    const book = await Book.create(req.body);\r\n                    console.log('post');\r\n                    console.log(req.body);\r\n    \r\n                    res.status(201).json({ success: true, data: book })\r\n                } catch (error) {\r\n                    res.status(400).json({ success: false });\r\n                    console.log(\"couldn't post 4\");\r\n                    \r\n                }\r\n                break;\r\n\r\n            //Deleting book post here instead of in [id].js\r\n            case 'DELETE':\r\n                console.log('Attempting to delete: '+ req.body.id);\r\n                try {\r\n                    const deletedBook = await Book.deleteOne({ _id: req.body.id });\r\n\r\n                    if (!deletedBook){\r\n                    return res.status(400).json({ success: false });\r\n\r\n                    }\r\n\r\n        res.status(200).json({ success: true, data: {} });\r\n      } catch (error) {\r\n        return res.status(400).json({ success: 'some error happenn' });\r\n\r\n      }\r\n\r\n            default:\r\n                res.status(400).json({ success: false });\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}