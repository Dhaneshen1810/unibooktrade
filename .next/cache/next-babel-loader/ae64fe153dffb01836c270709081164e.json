{"ast":null,"code":"import dbConnect from '../../../utils/dbConnect';\nimport Book from '../../../modals/book';\ndbConnect();\nexport default (async (req, res) => {\n  const {\n    method\n  } = req;\n  const myTitle = req.headers.title;\n  console.log('req:');\n  console.log(req);\n\n  switch (method) {\n    case 'GET':\n      try {\n        const books = await Book.find({\n          //Sort here\n          'title': myTitle\n        });\n        res.status(200).json({\n          success: true,\n          data: books\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case 'POST':\n      try {\n        const book = await Book.create(req.body);\n        res.status(201).json({\n          success: true,\n          data: book\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    default:\n      res.status(400).json({\n        success: false\n      });\n      break;\n  }\n});","map":{"version":3,"sources":["C:/Users/danmo/book-trade/pages/api/books/index.js"],"names":["dbConnect","Book","req","res","method","myTitle","headers","title","console","log","books","find","status","json","success","data","error","book","create","body"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AAEAD,SAAS;AAET,gBAAe,OAAOE,GAAP,EAAYC,GAAZ,KAAoB;AAG/B,QAAM;AAAEC,IAAAA;AAAF,MAAaF,GAAnB;AAEA,QAAMG,OAAO,GAAGH,GAAG,CAACI,OAAJ,CAAYC,KAA5B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ;;AAEA,UAAOE,MAAP;AACI,SAAK,KAAL;AACI,UAAI;AAEA,cAAMM,KAAK,GAAG,MAAMT,IAAI,CAACU,IAAL,CAAU;AAC1B;AACA,mBAASN;AAFiB,SAAV,CAApB;AAMAF,QAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAEL;AAAvB,SAArB;AACH,OATD,CASE,OAAOM,KAAP,EAAc;AACZb,QAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB;AACH;;AAED;;AACJ,SAAK,MAAL;AACI,UAAI;AACA,cAAMG,IAAI,GAAG,MAAMhB,IAAI,CAACiB,MAAL,CAAYhB,GAAG,CAACiB,IAAhB,CAAnB;AAEAhB,QAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAEE;AAAvB,SAArB;AACH,OAJD,CAIE,OAAOD,KAAP,EAAc;AACZb,QAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB;AAEH;;AACD;;AACJ;AACIX,MAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AA5BR;AAgCH,CAzCD","sourcesContent":["import dbConnect from '../../../utils/dbConnect';\r\nimport Book from '../../../modals/book';\r\n\r\ndbConnect();\r\n\r\nexport default async (req, res) => {\r\n\r\n \r\n    const { method } = req;\r\n\r\n    const myTitle = req.headers.title;\r\n    console.log('req:');\r\n    console.log(req);\r\n\r\n    switch(method){\r\n        case 'GET':\r\n            try {\r\n                \r\n                const books = await Book.find({\r\n                    //Sort here\r\n                    'title': myTitle\r\n                });\r\n                \r\n\r\n                res.status(200).json({ success: true, data: books })\r\n            } catch (error) {\r\n                res.status(400).json({ success: false });\r\n            }\r\n            \r\n            break;\r\n        case 'POST':\r\n            try {\r\n                const book = await Book.create(req.body);\r\n\r\n                res.status(201).json({ success: true, data: book })\r\n            } catch (error) {\r\n                res.status(400).json({ success: false });\r\n                \r\n            }\r\n            break;\r\n        default:\r\n            res.status(400).json({ success: false });\r\n            break;\r\n\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}