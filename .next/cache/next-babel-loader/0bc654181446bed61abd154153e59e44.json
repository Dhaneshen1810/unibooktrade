{"ast":null,"code":"import dbConnect from '../../../utils/dbConnect';\nimport Book from '../../../modals/book';\ndbConnect();\nexport default (async (req, res) => {\n  const {\n    method\n  } = req; //const myTitle = req.headers.title;\n  //const myAuthor = req.headers.author;\n\n  const myID = req.headers.id; // In case we have only the author as input, we will looking\n  // for all books with that author\n\n  if (myID != '') {\n    switch (method) {\n      case 'GET':\n        try {\n          const books = await Book.find({\n            //Sort here\n            //'title': myTitle\n            'author': \"Be\"\n          });\n          res.status(200).json({\n            success: true,\n            data: books\n          });\n        } catch (error) {\n          res.status(400).json({\n            success: false\n          });\n          console.log('book by id not found');\n        }\n\n        break;\n\n      default:\n        res.status(400).json({\n          success: false\n        });\n        break;\n    }\n  } //In case only the title is given as input,\n  // Look for all books with that title\n  else {\n      switch (method) {\n        case 'GET':\n          try {\n            const books = await Book.find({\n              //Sort here\n              'id': myID\n            });\n            res.status(200).json({\n              success: true,\n              data: books\n            });\n          } catch (error) {\n            res.status(400).json({\n              success: false\n            });\n            console.log('Book by ID not found');\n          }\n\n          break;\n\n        default:\n          res.status(400).json({\n            success: false\n          });\n          break;\n      }\n    }\n});","map":{"version":3,"sources":["C:/Users/danmo/book-trade/pages/api/books/bookbyid.js"],"names":["dbConnect","Book","req","res","method","myID","headers","id","books","find","status","json","success","data","error","console","log"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AAEAD,SAAS;AAET,gBAAe,OAAOE,GAAP,EAAYC,GAAZ,KAAoB;AAG/B,QAAM;AAAEC,IAAAA;AAAF,MAAaF,GAAnB,CAH+B,CAK/B;AACA;;AACA,QAAMG,IAAI,GAAGH,GAAG,CAACI,OAAJ,CAAYC,EAAzB,CAP+B,CAU/B;AACA;;AAEA,MAAIF,IAAI,IAAE,EAAV,EAAa;AAET,YAAOD,MAAP;AACI,WAAK,KAAL;AACI,YAAI;AAEA,gBAAMI,KAAK,GAAG,MAAMP,IAAI,CAACQ,IAAL,CAAU;AAC1B;AACA;AACA,sBAAU;AAHgB,WAAV,CAApB;AAOAN,UAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE,IAAX;AAAiBC,YAAAA,IAAI,EAAEL;AAAvB,WAArB;AACH,SAVD,CAUE,OAAOM,KAAP,EAAc;AACZX,UAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB;AAEAG,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH;;AAED;;AACJ;AACIb,QAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB;AACA;AArBR;AAyBH,GA3BD,CA6BA;AACA;AA9BA,OA+BK;AAED,cAAOR,MAAP;AACI,aAAK,KAAL;AACI,cAAI;AAEA,kBAAMI,KAAK,GAAG,MAAMP,IAAI,CAACQ,IAAL,CAAU;AAC1B;AACA,oBAAMJ;AAFoB,aAAV,CAApB;AAMAF,YAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE,IAAX;AAAiBC,cAAAA,IAAI,EAAEL;AAAvB,aAArB;AACH,WATD,CASE,OAAOM,KAAP,EAAc;AACZX,YAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB;AAEAG,YAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH;;AAED;;AACJ;AACIb,UAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB;AACA;AApBR;AAsBH;AAIJ,CAxED","sourcesContent":["import dbConnect from '../../../utils/dbConnect';\r\nimport Book from '../../../modals/book';\r\n\r\ndbConnect();\r\n\r\nexport default async (req, res) => {\r\n\r\n \r\n    const { method } = req; \r\n\r\n    //const myTitle = req.headers.title;\r\n    //const myAuthor = req.headers.author;\r\n    const myID = req.headers.id;\r\n\r\n\r\n    // In case we have only the author as input, we will looking\r\n    // for all books with that author\r\n    \r\n    if (myID!=''){\r\n\r\n        switch(method){\r\n            case 'GET':\r\n                try {\r\n                    \r\n                    const books = await Book.find({\r\n                        //Sort here\r\n                        //'title': myTitle\r\n                        'author': \"Be\"\r\n                    });\r\n                    \r\n    \r\n                    res.status(200).json({ success: true, data: books })\r\n                } catch (error) {\r\n                    res.status(400).json({ success: false }); \r\n\r\n                    console.log('book by id not found');\r\n                }\r\n\r\n                break;\r\n            default:\r\n                res.status(400).json({ success: false });\r\n                break;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //In case only the title is given as input,\r\n    // Look for all books with that title\r\n    else {\r\n\r\n        switch(method){\r\n            case 'GET':\r\n                try {\r\n                    \r\n                    const books = await Book.find({\r\n                        //Sort here\r\n                        'id': myID\r\n                    });\r\n                    \r\n    \r\n                    res.status(200).json({ success: true, data: books })\r\n                } catch (error) {\r\n                    res.status(400).json({ success: false });\r\n\r\n                    console.log('Book by ID not found');\r\n                }\r\n                \r\n                break;\r\n            default:\r\n                res.status(400).json({ success: false });\r\n                break;\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n}\r\n"]},"metadata":{},"sourceType":"module"}