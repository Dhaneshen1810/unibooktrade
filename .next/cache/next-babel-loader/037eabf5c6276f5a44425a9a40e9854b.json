{"ast":null,"code":"import dbConnect from '../../../utils/dbConnect';\nimport Book from '../../../modals/book';\ndbConnect();\nconsole.log('inside the main book ');\nexport default (async (req, res) => {\n  const {\n    method\n  } = req;\n  console.log('method is ' + method);\n  var myTitle = req.headers.title;\n  var myAuthor = req.headers.author;\n\n  if (req.body.id) {\n    console.log('id present.');\n    const myID = req.body.id;\n    myTitle = req.body.title;\n    myAuthor = req.body.author; //const ownerID = req.body.ownerID;\n\n    console.log(req.body);\n  }\n\n  console.log('title is ' + myTitle);\n  console.log('author is ' + myAuthor); //console.log(req.body.imageFront.data[0]);\n  // In case we have only the author as input, we will looking\n  // for all books with that author\n\n  if (myTitle == '' && myAuthor != '') {\n    console.log('No title');\n\n    switch (method) {\n      case 'GET':\n        try {\n          const books = await Book.find({\n            //Sort here\n            //'title': myTitle\n            'author': myAuthor\n          });\n          res.status(200).json({\n            success: true,\n            data: books\n          });\n        } catch (error) {\n          res.status(400).json({\n            success: false\n          });\n          console.log('Author not found');\n        }\n\n        break;\n\n      case 'POST':\n        try {\n          const book = await Book.create(req.body);\n          console.log('post');\n          console.log(req.body);\n          res.status(201).json({\n            success: true,\n            data: book\n          });\n        } catch (error) {\n          res.status(400).json({\n            success: false\n          });\n          console.log(\"couldn't post 1\");\n        }\n\n        break;\n\n      default:\n        res.status(400).json({\n          success: false\n        });\n        break;\n    }\n  } //In case only the title is given as input,\n  // Look for all books with that title\n  else if (myAuthor == '' && myTitle != '') {\n      console.log('No author');\n\n      switch (method) {\n        case 'GET':\n          try {\n            const books = await Book.find({\n              //Sort here\n              'title': myTitle //'author': 'Robert Kiyosaki'\n\n            });\n            res.status(200).json({\n              success: true,\n              data: books\n            });\n          } catch (error) {\n            res.status(400).json({\n              success: false\n            });\n            console.log('Title not found');\n          }\n\n          break;\n\n        case 'POST':\n          try {\n            const book = await Book.create(req.body);\n            console.log('post');\n            console.log(req.body);\n            res.status(201).json({\n              success: true,\n              data: book\n            });\n          } catch (error) {\n            res.status(400).json({\n              success: false\n            });\n            console.log(\"couldn't post 2\");\n          }\n\n          break;\n\n        default:\n          res.status(400).json({\n            success: false\n          });\n          break;\n      }\n    } // User input both the title and the author\n    // Return book matching both\n    else if (myTitle != '' && myAuthor != '') {\n        console.log('my title is: ' + myTitle);\n        console.log('my author is: ' + myAuthor);\n\n        switch (method) {\n          case 'GET':\n            try {\n              const books = await Book.find({\n                //Sort here\n                'title': myTitle,\n                'author': myAuthor\n              });\n              console.log('books are ready');\n              res.status(200).json({\n                success: true,\n                data: books\n              });\n            } catch (error) {\n              res.status(400).json({\n                success: false\n              });\n            }\n\n            break;\n\n          case 'POST':\n            try {\n              const book = await Book.create(req.body); //var str = req.body.imageFront;\n              //var str = req.body.imageFront.data;\n              //console.log(str)\n\n              res.status(201).json({\n                success: true,\n                data: book\n              });\n            } catch (error) {\n              res.status(400).json({\n                success: false\n              });\n              console.log(\"couldn't post 3\");\n              console.log('Failed: ' + myTitle + ' ' + myAuthor);\n            }\n\n            break;\n\n          case 'PUT':\n            try {\n              const book = await Book.findByIdAndUpdate(req.body.id, req.body, {\n                new: true,\n                runValidators: true\n              });\n\n              if (!book) {\n                return res.status(400).json({\n                  success: '!book'\n                });\n              }\n\n              res.status(200).json({\n                success: true,\n                data: book\n              });\n            } catch (error) {\n              res.status(400).json({\n                success: false\n              });\n            }\n\n            break;\n\n          default:\n            res.status(400).json({\n              success: false\n            });\n            break;\n        }\n      } // There is no given title and author\n      // We return all books available\n      else if (myTitle == '' && myAuthor == '') {\n          console.log('in number 4');\n\n          switch (method) {\n            case 'GET':\n              console.log(req.headers.bookid);\n\n              if (req.headers.id) {\n                // bookID has been provided\n                // We will use bookID to find book\n                if (req.headers.bookid) {\n                  try {\n                    console.log('Book id present');\n                    const books = await Book.find({\n                      _id: req.headers.bookid\n                    });\n                    console.log('Got books');\n                    res.status(200).json({\n                      success: true,\n                      data: books\n                    });\n                  } catch (error) {\n                    res.status(400).json({\n                      success: false\n                    });\n                  }\n                } // No book id is provided\n                // Get all books from the owner\n                else {\n                    try {\n                      console.log('Book id not present');\n                      const books = await Book.find({\n                        ownerID: req.headers.id\n                      });\n                      console.log('Got books');\n                      res.status(200).json({\n                        success: true,\n                        data: books\n                      });\n                    } catch (error) {\n                      res.status(400).json({\n                        success: false\n                      });\n                    }\n                  }\n              } else {\n                try {\n                  const books = await Book.find({});\n                  res.status(200).json({\n                    success: true,\n                    data: books\n                  });\n                } catch (error) {\n                  res.status(400).json({\n                    success: false\n                  });\n                }\n              }\n\n              break;\n\n            case 'POST':\n              try {\n                const book = await Book.create(req.body);\n                console.log('post');\n                console.log(req.body);\n                res.status(201).json({\n                  success: true,\n                  data: book\n                });\n              } catch (error) {\n                res.status(400).json({\n                  success: false\n                });\n                console.log(\"couldn't post 4\");\n              }\n\n              break;\n            //Deleting book post here instead of in [id].js\n\n            case 'DELETE':\n              console.log('Attempting to delete: ' + req.body.id);\n\n              try {\n                const deletedBook = await Book.deleteOne({\n                  _id: req.body.id\n                });\n\n                if (!deletedBook) {\n                  return res.status(400).json({\n                    success: false\n                  });\n                }\n\n                res.status(200).json({\n                  success: true,\n                  data: {}\n                });\n              } catch (error) {\n                return res.status(400).json({\n                  success: 'some error happenn'\n                });\n              }\n\n            default:\n              res.status(400).json({\n                success: false\n              });\n              break;\n          }\n        }\n});","map":null,"metadata":{},"sourceType":"module"}