{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danmo\\\\book-trade\\\\pages\\\\booklist.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { withRouter } from \"next/router\";\nimport Link from 'next/link'; //Getting book data from database\n\nimport fetch from 'isomorphic-unfetch';\nvar book = null;\nconst posts = withRouter(({\n  router: {\n    query: {\n      mytitle,\n      author\n    }\n  },\n  books\n}) => __jsx(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }\n}, __jsx(\"div\", {\n  className: \"book-greeting\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }\n}, __jsx(\"div\", {\n  className: \"greeting-text\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 13\n  }\n}, __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 17\n  }\n}, \"Find your book by entering the \", __jsx(\"b\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 25\n  }\n}, \"Author\"), \" or \", __jsx(\"b\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 42\n  }\n}, \"Book name below.\")))), __jsx(\"div\", {\n  className: \"book-list\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }\n}, books.map(book => {\n  //if (mytitle=='' && author==''){\n  return __jsx(\"div\", {\n    key: book._id,\n    className: \"book-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 25\n    }\n  }, \"Title: \", book.title), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 25\n    }\n  }, \"Author: \", book.author)); //}\n\n  /*\r\n  else{\r\n      if (book.title == mytitle || book.author == author){\r\n    \r\n          return (\r\n              <div key={book._id} className='book-item'>\r\n                  {book.title}\r\n                  <p>Book author:</p>\r\n                  {book.author}\r\n              </div>\r\n          )\r\n      }\r\n          \r\n          else {\r\n              \r\n          }\r\n  \r\n  }*/\n}))));\n\nposts.getInitialProps = async () => {\n  const res = await fetch('http://localhost:3000/api/books');\n  const {\n    data\n  } = await res.json();\n  return {\n    books: data\n  };\n};\n\nexport default posts;","map":{"version":3,"sources":["C:/Users/danmo/book-trade/pages/booklist.js"],"names":["withRouter","Link","fetch","book","posts","router","query","mytitle","author","books","map","_id","title","getInitialProps","res","data","json"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,aAA3B;AACA,OAAOC,IAAP,MAAiB,WAAjB,C,CAEA;;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAGA,IAAIC,IAAI,GAAC,IAAT;AAGA,MAAMC,KAAK,GAAGJ,UAAU,CAAC,CAAC;AAAEK,EAAAA,MAAM,EAAG;AAAEC,IAAAA,KAAK,EAAC;AAACC,MAAAA,OAAD;AAAUC,MAAAA;AAAV;AAAR,GAAX;AAAuCC,EAAAA;AAAvC,CAAD,KAGrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAMI;AAAK,EAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI;AAAK,EAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADR,UACyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADzB,CADJ,CADJ,CANJ,EAiBI;AAAK,EAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACCA,KAAK,CAACC,GAAN,CAAWP,IAAI,IAAI;AAGhB;AACI,SACI;AAAK,IAAA,GAAG,EAAEA,IAAI,CAACQ,GAAf;AAAoB,IAAA,SAAS,EAAC,WAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAWR,IAAI,CAACS,KAAhB,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAYT,IAAI,CAACK,MAAjB,CAFJ,CADJ,CAJY,CAWhB;;AACA;;;;;;;;;;;;;;;;;;AAqBH,CAjCA,CADD,CAjBJ,CAHoB,CAAxB;;AA4DAJ,KAAK,CAACS,eAAN,GAAwB,YAAW;AAC/B,QAAMC,GAAG,GAAG,MAAMZ,KAAK,CAAC,iCAAD,CAAvB;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAW,MAAMD,GAAG,CAACE,IAAJ,EAAvB;AAEA,SAAM;AAAEP,IAAAA,KAAK,EAAEM;AAAT,GAAN;AACH,CALD;;AAQA,eAAeX,KAAf","sourcesContent":["import { withRouter } from \"next/router\";\r\nimport Link from 'next/link';\r\n\r\n//Getting book data from database\r\nimport fetch from 'isomorphic-unfetch';\r\n\r\n\r\nvar book=null;\r\n\r\n\r\nconst posts = withRouter(({ router:  { query:{mytitle, author}}, books} ) => (\r\n\r\n    \r\n    <div>\r\n\r\n\r\n    \r\n            \r\n        \r\n        <div className='book-greeting'>\r\n            <div className='greeting-text'>\r\n                <p>Find your book by entering \r\n                    the <b>Author</b> or <b>Book name\r\n                        below.\r\n                    </b>\r\n                </p>\r\n            </div>\r\n            \r\n        </div>\r\n        \r\n        <div className='book-list'>\r\n        {books.map( book => {\r\n            \r\n\r\n            //if (mytitle=='' && author==''){\r\n                return (\r\n                    <div key={book._id} className='book-item'>\r\n                        <p>Title: {book.title}</p>\r\n                        <p>Author: {book.author}</p>\r\n                        \r\n                    </div>\r\n                )\r\n            //}\r\n            /*\r\n            else{\r\n                if (book.title == mytitle || book.author == author){\r\n\r\n            \r\n                    return (\r\n                        <div key={book._id} className='book-item'>\r\n                            {book.title}\r\n                            <p>Book author:</p>\r\n                            {book.author}\r\n                        </div>\r\n                    )\r\n                }\r\n                    \r\n                    else {\r\n                        \r\n                    }\r\n            \r\n            }*/\r\n\r\n            \r\n        })}\r\n        </div>        \r\n    </div>\r\n));\r\n\r\n\r\nposts.getInitialProps = async () =>{\r\n    const res = await fetch('http://localhost:3000/api/books');\r\n    const { data } = await res.json();\r\n\r\n    return{ books: data }\r\n}\r\n\r\n    \r\nexport default posts;"]},"metadata":{},"sourceType":"module"}