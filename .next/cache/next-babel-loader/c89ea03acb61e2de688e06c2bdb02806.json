{"ast":null,"code":"import dbConnect from '../../../utils/dbConnect';\nimport Book from '../../../modals/book';\ndbConnect();\nexport default (async (req, res) => {\n  const {\n    query: {\n      id\n    },\n    method\n  } = req;\n\n  switch (method) {\n    case 'GET':\n      try {\n        const book = await Book.findById(id);\n\n        if (!book) {\n          return res.status(400).json({\n            success: false\n          });\n        }\n\n        res.status(200).json({\n          success: true,\n          data: book\n        });\n      } catch (error) {\n        return res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case 'PUT':\n      try {\n        const book = await Book.findByIdAndUpdate(id, req.body, {\n          new: true,\n          runValidators: true\n        });\n\n        if (!book) {\n          return res.status(400).json({\n            success: false\n          });\n        }\n\n        res.status(200).json({\n          success: true,\n          data: book\n        });\n      } catch (error) {\n        return res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case 'DELETE':\n      try {\n        const deletedBook = await Book.deleteOne({\n          _id: id\n        });\n\n        if (!deletedBook) {\n          return res.status(400).json({\n            success: false\n          });\n        }\n\n        res.status(200).json({\n          success: true,\n          data: {}\n        });\n      } catch (error) {\n        return res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    default:\n      res.status(400).json({\n        success: false\n      });\n      break;\n  }\n});","map":{"version":3,"sources":["C:/Users/danmo/book-trade/pages/api/books/[id].js"],"names":["dbConnect","Book","req","res","query","id","method","book","findById","status","json","success","data","error","findByIdAndUpdate","body","new","runValidators","deletedBook","deleteOne","_id"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AAEAD,SAAS;AAET,gBAAe,OAAOE,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AACJC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF,KADH;AAEJC,IAAAA;AAFI,MAGHJ,GAHH;;AAKA,UAAOI,MAAP;AACE,SAAK,KAAL;AACE,UAAI;AACF,cAAMC,IAAI,GAAG,MAAMN,IAAI,CAACO,QAAL,CAAcH,EAAd,CAAnB;;AAEA,YAAI,CAACE,IAAL,EAAU;AACR,iBAAOJ,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAAP;AACD;;AAEDR,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAEL;AAAvB,SAArB;AAED,OATD,CASE,OAAOM,KAAP,EAAc;AACd,eAAOV,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB,CAAP;AAED;;AACD;;AAEF,SAAK,KAAL;AACE,UAAI;AACF,cAAMJ,IAAI,GAAG,MAAMN,IAAI,CAACa,iBAAL,CAAuBT,EAAvB,EAA2BH,GAAG,CAACa,IAA/B,EAAqC;AACtDC,UAAAA,GAAG,EAAE,IADiD;AAEtDC,UAAAA,aAAa,EAAE;AAFuC,SAArC,CAAnB;;AAKA,YAAI,CAACV,IAAL,EAAU;AACR,iBAAOJ,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAAP;AACD;;AAEDR,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAEL;AAAvB,SAArB;AAGD,OAbD,CAaE,OAAOM,KAAP,EAAc;AACd,eAAOV,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB,CAAP;AACD;;AACD;;AAEF,SAAK,QAAL;AACE,UAAI;AACF,cAAMO,WAAW,GAAG,MAAMjB,IAAI,CAACkB,SAAL,CAAe;AAAEC,UAAAA,GAAG,EAAEf;AAAP,SAAf,CAA1B;;AAEA,YAAI,CAACa,WAAL,EAAiB;AACf,iBAAOf,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAAP;AAED;;AAEDR,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAE;AAAvB,SAArB;AACD,OATD,CASE,OAAOC,KAAP,EAAc;AACd,eAAOV,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB,CAAP;AAED;;AACD;;AACF;AACER,MAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB;AAEA;AAtDJ;AA2DD,CAjED","sourcesContent":["import dbConnect from '../../../utils/dbConnect';\r\nimport Book from '../../../modals/book';\r\n\r\ndbConnect();\r\n\r\nexport default async (req, res) => {\r\n  const {\r\n    query: { id },\r\n    method\r\n  }= req;\r\n\r\n  switch(method){\r\n    case 'GET':\r\n      try {\r\n        const book = await Book.findById(id);\r\n\r\n        if (!book){\r\n          return res.status(400).json({ success: false });\r\n        }\r\n      \r\n        res.status(200).json({ success: true, data: book });\r\n\r\n      } catch (error) {\r\n        return res.status(400).json({ success: false });\r\n\r\n      }\r\n      break;\r\n\r\n    case 'PUT':\r\n      try {\r\n        const book = await Book.findByIdAndUpdate(id, req.body, {\r\n          new: true,\r\n          runValidators: true\r\n        });\r\n\r\n        if (!book){\r\n          return res.status(400).json({ success: false });\r\n        }\r\n\r\n        res.status(200).json({ success: true, data: book });\r\n\r\n\r\n      } catch (error) {\r\n        return res.status(400).json({ success: false });\r\n      }\r\n      break;\r\n\r\n    case 'DELETE':\r\n      try {\r\n        const deletedBook = await Book.deleteOne({ _id: id });\r\n\r\n        if (!deletedBook){\r\n          return res.status(400).json({ success: false });\r\n\r\n        }\r\n\r\n        res.status(200).json({ success: true, data: {} });\r\n      } catch (error) {\r\n        return res.status(400).json({ success: false });\r\n\r\n      }\r\n      break;\r\n    default:\r\n      res.status(400).json({ success: false });\r\n\r\n      break;\r\n\r\n  }\r\n  \r\n\r\n}"]},"metadata":{},"sourceType":"module"}