{"ast":null,"code":"import dbConnect from '../../../utils/dbConnect';\nimport Book from '../../../modals/book';\ndbConnect();\nexport default (async (req, res) => {\n  const {\n    method\n  } = req;\n  const myTitle = req.headers.title;\n  const myAuthor = req.headers.author;\n  console.log('title is ' + myTitle);\n  console.log('author is ' + myAuthor); //console.log(req.body.imageFront.data[0]);\n  // In case we have only the author as input, we will looking\n  // for all books with that author\n\n  if (myTitle == '' && myAuthor != '') {\n    console.log('No title');\n\n    switch (method) {\n      case 'GET':\n        try {\n          const books = await Book.find({\n            //Sort here\n            //'title': myTitle\n            'author': myAuthor\n          });\n          res.status(200).json({\n            success: true,\n            data: books\n          });\n        } catch (error) {\n          res.status(400).json({\n            success: false\n          });\n          console.log('Author not found');\n        }\n\n        break;\n\n      case 'POST':\n        try {\n          const book = await Book.create(req.body);\n          console.log('post');\n          console.log(req.body);\n          res.status(201).json({\n            success: true,\n            data: book\n          });\n        } catch (error) {\n          res.status(400).json({\n            success: false\n          });\n          console.log(\"couldn't post 1\");\n        }\n\n        break;\n\n      default:\n        res.status(400).json({\n          success: false\n        });\n        break;\n    }\n  } //In case only the title is given as input,\n  // Look for all books with that title\n  else if (myAuthor == '' && myTitle != '') {\n      console.log('No author');\n\n      switch (method) {\n        case 'GET':\n          try {\n            const books = await Book.find({\n              //Sort here\n              'title': myTitle //'author': 'Robert Kiyosaki'\n\n            });\n            res.status(200).json({\n              success: true,\n              data: books\n            });\n          } catch (error) {\n            res.status(400).json({\n              success: false\n            });\n            console.log('Title not found');\n          }\n\n          break;\n\n        case 'POST':\n          try {\n            const book = await Book.create(req.body);\n            console.log('post');\n            console.log(req.body);\n            res.status(201).json({\n              success: true,\n              data: book\n            });\n          } catch (error) {\n            res.status(400).json({\n              success: false\n            });\n            console.log(\"couldn't post 2\");\n          }\n\n          break;\n\n        default:\n          res.status(400).json({\n            success: false\n          });\n          break;\n      }\n    } // User input both the title and the author\n    // Return book matching both\n    else if (myTitle != '' && myAuthor != '') {\n        console.log('my title is: ' + myTitle);\n        console.log('my author is: ' + myAuthor);\n\n        switch (method) {\n          case 'GET':\n            try {\n              const books = await Book.find({\n                //Sort here\n                'title': myTitle,\n                'author': myAuthor\n              });\n              console.log('books are ready');\n              res.status(200).json({\n                success: true,\n                data: books\n              });\n            } catch (error) {\n              res.status(400).json({\n                success: false\n              });\n            }\n\n            break;\n\n          case 'POST':\n            try {\n              const book = await Book.create(req.body); //var str = req.body.imageFront;\n              //var str = req.body.imageFront.data;\n              //console.log(str)\n\n              res.status(201).json({\n                success: true,\n                data: book\n              });\n            } catch (error) {\n              res.status(400).json({\n                success: false\n              });\n              console.log(\"couldn't post 3\");\n              console.log('Failed: ' + myTitle + ' ' + myAuthor);\n            }\n\n            break;\n\n          default:\n            res.status(400).json({\n              success: false\n            });\n            break;\n        }\n      } // There is no given title and author\n      // We return all books available\n      else if (myTitle == '' && myAuthor == '') {\n          console.log('in number 4');\n\n          switch (method) {\n            case 'GET':\n              if (req.headers.id) {\n                try {\n                  console.log('awaiting book now:');\n                  const books = await Book.find({\n                    ownerID: req.headers.id\n                  });\n                  console.log('Got books');\n                  res.status(200).json({\n                    success: true,\n                    data: books\n                  });\n                } catch (error) {\n                  res.status(400).json({\n                    success: false\n                  });\n                }\n              } else {\n                try {\n                  const books = await Book.find({});\n                  res.status(200).json({\n                    success: true,\n                    data: books\n                  });\n                } catch (error) {\n                  res.status(400).json({\n                    success: false\n                  });\n                }\n              }\n\n              break;\n\n            case 'POST':\n              try {\n                const book = await Book.create(req.body);\n                console.log('post');\n                console.log(req.body);\n                res.status(201).json({\n                  success: true,\n                  data: book\n                });\n              } catch (error) {\n                res.status(400).json({\n                  success: false\n                });\n                console.log(\"couldn't post 4\");\n              }\n\n              break;\n\n            default:\n              res.status(400).json({\n                success: false\n              });\n              break;\n          }\n        }\n});","map":{"version":3,"sources":["/home/dhaneshen/Documents/booktrade/unibooktrade/pages/api/books/index.js"],"names":["dbConnect","Book","req","res","method","myTitle","headers","title","myAuthor","author","console","log","books","find","status","json","success","data","error","book","create","body","id","ownerID"],"mappings":"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","sourcesContent":["import dbConnect from '../../../utils/dbConnect';\nimport Book from '../../../modals/book';\n\ndbConnect();\n\n\nexport default async (req, res) => {\n\n \n    const { method } = req; \n\n    const myTitle = req.headers.title;\n    const myAuthor = req.headers.author;\n    \n\n    console.log('title is '+myTitle);\n    console.log('author is '+ myAuthor);\n    //console.log(req.body.imageFront.data[0]);\n\n\n   \n    // In case we have only the author as input, we will looking\n    // for all books with that author\n    if (myTitle=='' && myAuthor!=''){\n        console.log('No title')\n\n        switch(method){\n            case 'GET':\n                try {\n                    \n                    const books = await Book.find({\n                        //Sort here\n                        //'title': myTitle\n                        'author': myAuthor\n                    });\n                    \n                    \n    \n                    res.status(200).json({ success: true, data: books })\n                } catch (error) {\n                    res.status(400).json({ success: false }); \n\n                    console.log('Author not found');\n                }\n                \n                break;\n            case 'POST':\n                try {\n                    const book = await Book.create(req.body);\n                    console.log('post');\n                    console.log(req.body);\n    \n                    res.status(201).json({ success: true, data: book })\n                } catch (error) {\n                    res.status(400).json({ success: false });\n                    console.log(\"couldn't post 1\");\n                    \n                }\n                break;\n            default:\n                res.status(400).json({ success: false });\n                break;\n        }\n\n\n    }\n\n    //In case only the title is given as input,\n    // Look for all books with that title\n    else if (myAuthor=='' && myTitle!=''){\n        console.log('No author');\n\n        switch(method){\n            case 'GET':\n                try {\n                    \n                    const books = await Book.find({\n                        //Sort here\n                        'title': myTitle\n                        //'author': 'Robert Kiyosaki'\n                    });\n                    \n    \n                    res.status(200).json({ success: true, data: books })\n                } catch (error) {\n                    res.status(400).json({ success: false });\n\n                    console.log('Title not found');\n                }\n                \n                break;\n            case 'POST':\n                try {\n                    const book = await Book.create(req.body);\n                    console.log('post');\n                    console.log(req.body);\n    \n                    res.status(201).json({ success: true, data: book })\n                } catch (error) {\n                    res.status(400).json({ success: false });\n                    console.log(\"couldn't post 2\");\n                    \n                }\n                break;\n            default:\n                res.status(400).json({ success: false });\n                break;\n        }\n    }\n\n    // User input both the title and the author\n    // Return book matching both\n    else if (myTitle!='' && myAuthor!=''){\n        console.log('my title is: '+ myTitle);\n        console.log('my author is: '+ myAuthor);\n        switch(method){\n            case 'GET':\n                try {\n\n                    const books = await Book.find({\n                        //Sort here\n                        'title': myTitle,\n                        'author': myAuthor\n                    });\n                    console.log('books are ready')\n    \n                    res.status(200).json({ success: true, data: books })\n                } catch (error) {\n                    res.status(400).json({ success: false });\n                }\n                \n                break;\n            case 'POST':\n                try {\n                    const book = await Book.create(req.body);\n                    //var str = req.body.imageFront;\n                    //var str = req.body.imageFront.data;\n                    //console.log(str)\n    \n                    res.status(201).json({ success: true, data: book })\n                } catch (error) {\n                    res.status(400).json({ success: false });\n                    console.log(\"couldn't post 3\");\n                    console.log('Failed: '+myTitle+' '+myAuthor);\n                    \n                }\n                break;\n            default:\n                res.status(400).json({ success: false });\n                break;\n        }\n    }\n    \n\n    // There is no given title and author\n    // We return all books available\n    else if (myTitle=='' && myAuthor==''){\n        console.log('in number 4')\n        switch(method){\n            \n            case 'GET':\n                if (req.headers.id){\n                try {\n                    console.log('awaiting book now:')\n\n                    const books = await Book.find({\n                        ownerID: req.headers.id\n                    });\n\n                    console.log('Got books');\n                    \n    \n                    res.status(200).json({ success: true, data: books })\n                } catch (error) {\n                    res.status(400).json({ success: false });\n                }\n\n            }\n            else{\n                \n                try {\n                    \n                    const books = await Book.find({\n                    });\n                    \n    \n                    res.status(200).json({ success: true, data: books })\n                } catch (error) {\n                    res.status(400).json({ success: false });\n                }\n            }\n                \n                break;\n            case 'POST':\n                try {\n                    const book = await Book.create(req.body);\n                    console.log('post');\n                    console.log(req.body);\n    \n                    res.status(201).json({ success: true, data: book })\n                } catch (error) {\n                    res.status(400).json({ success: false });\n                    console.log(\"couldn't post 4\");\n                    \n                }\n                break;\n            default:\n                res.status(400).json({ success: false });\n                break;\n        }\n    }\n\n\n\n}\n"]},"metadata":{},"sourceType":"module"}