{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport dbConnect from '../../../utils/dbConnect';\nimport Book from '../../../modals/book';\ndbConnect();\nexport default /*#__PURE__*/(function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res) {\n    var method, books, book;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            method = req.method;\n            _context.t0 = method;\n            _context.next = _context.t0 === 'GET' ? 4 : _context.t0 === 'POST' ? 15 : 26;\n            break;\n\n          case 4:\n            _context.prev = 4;\n            _context.next = 7;\n            return Book.find({});\n\n          case 7:\n            books = _context.sent;\n            res.status(200).json({\n              success: true,\n              data: books\n            });\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t1 = _context[\"catch\"](4);\n            res.status(400).json({\n              success: false\n            });\n\n          case 14:\n            return _context.abrupt(\"break\", 28);\n\n          case 15:\n            _context.prev = 15;\n            _context.next = 18;\n            return Book.create(req.body);\n\n          case 18:\n            book = _context.sent;\n            res.status(201).json({\n              success: true,\n              data: book\n            });\n            _context.next = 25;\n            break;\n\n          case 22:\n            _context.prev = 22;\n            _context.t2 = _context[\"catch\"](15);\n            res.status(400).json({\n              success: false\n            });\n\n          case 25:\n            return _context.abrupt(\"break\", 28);\n\n          case 26:\n            res.status(400).json({\n              success: false\n            });\n            return _context.abrupt(\"break\", 28);\n\n          case 28:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 11], [15, 22]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["C:/Users/danmo/book-trade/pages/api/books/index.js"],"names":["dbConnect","Book","req","res","method","find","books","status","json","success","data","create","body","book"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AAEAD,SAAS;AAET;AAAA,sEAAe,iBAAOE,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAKHC,YAAAA,MALG,GAKQF,GALR,CAKHE,MALG;AAAA,0BAOJA,MAPI;AAAA,4CAQF,KARE,uBAkBF,MAlBE;AAAA;;AAAA;AAAA;AAAA;AAAA,mBAUqBH,IAAI,CAACI,IAAL,CAAU,EAAV,CAVrB;;AAAA;AAUOC,YAAAA,KAVP;AAYCH,YAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE,IAAX;AAAiBC,cAAAA,IAAI,EAAEJ;AAAvB,aAArB;AAZD;AAAA;;AAAA;AAAA;AAAA;AAcCH,YAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB;;AAdD;AAAA;;AAAA;AAAA;AAAA;AAAA,mBAoBoBR,IAAI,CAACU,MAAL,CAAYT,GAAG,CAACU,IAAhB,CApBpB;;AAAA;AAoBOC,YAAAA,IApBP;AAsBCV,YAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE,IAAX;AAAiBC,cAAAA,IAAI,EAAEG;AAAvB,aAArB;AAtBD;AAAA;;AAAA;AAAA;AAAA;AAwBCV,YAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB;;AAxBD;AAAA;;AAAA;AA6BHN,YAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB;AA7BG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import dbConnect from '../../../utils/dbConnect';\r\nimport Book from '../../../modals/book';\r\n\r\ndbConnect();\r\n\r\nexport default async (req, res) => {\r\n\r\n\r\n\r\n    \r\n    const { method } = req;\r\n\r\n    switch(method){\r\n        case 'GET':\r\n            try {\r\n                const books = await Book.find({});\r\n\r\n                res.status(200).json({ success: true, data: books })\r\n            } catch (error) {\r\n                res.status(400).json({ success: false });\r\n            }\r\n            \r\n            break;\r\n        case 'POST':\r\n            try {\r\n                const book = await Book.create(req.body);\r\n\r\n                res.status(201).json({ success: true, data: book })\r\n            } catch (error) {\r\n                res.status(400).json({ success: false });\r\n                \r\n            }\r\n            break;\r\n        default:\r\n            res.status(400).json({ success: false });\r\n            break;\r\n\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}