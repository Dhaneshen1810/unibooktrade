{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/home/dhaneshen/Documents/booktrade/unibooktrade/pages/testing.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter, withRouter } from 'next/router';\nimport Router from 'next/router';\nimport { Form } from 'react-bootstrap';\nimport { Label } from 'semantic-ui-react'; //Image resize\n\nimport Resizer from 'react-image-file-resizer';\n\nvar fileUpload = require('fuctbase64');\n\nvar EditBook = withRouter(_c = _s(function (_ref) {\n  _s();\n\n  var _ref$router$query = _ref.router.query,\n      name = _ref$router$query.name,\n      id = _ref$router$query.id,\n      firstname = _ref$router$query.firstname,\n      bookID = _ref$router$query.bookID,\n      bookTitle = _ref$router$query.bookTitle,\n      bookAuthor = _ref$router$query.bookAuthor;\n\n  var _useState = useState({\n    title: '',\n    author: '',\n    ownerID: id,\n    ownerName: name,\n    imageFront: {\n      data: '/static/default-image.svg',\n      contentType: 'image/png'\n    }\n  }),\n      form = _useState[0],\n      setForm = _useState[1];\n\n  var _useState2 = useState(false),\n      isSubmitting = _useState2[0],\n      setIsSubmitting = _useState2[1];\n\n  var _useState3 = useState({}),\n      errors = _useState3[0],\n      setErrors = _useState3[1]; //state of the preview image\n\n\n  var _useState4 = useState('/static/default-image.svg'),\n      prevImage = _useState4[0],\n      setPrevImage = _useState4[1];\n\n  var router = useRouter();\n  useEffect(function () {\n    // Set form data to that from Router\n    setForm(_objectSpread(_objectSpread({}, form), {}, {\n      title: bookTitle,\n      author: bookAuthor,\n      ownerID: id,\n      ownerName: name\n    }));\n    console.log(form);\n    console.log('name is ' + name);\n\n    if (isSubmitting) {\n      if (Object.keys(errors).length === 0) {\n        //bookmatch();\n        //alert('New book created')\n        createBook();\n        /*\n        Router.push({\n            pathname: '/booklist',\n            query: { \n                    mytitle: form.title,\n                    author: form.author\n                    \n            }\n        });*/\n      } else {\n        setIsSubmitting(false);\n      }\n    }\n  }, [errors]); //Create new book post\n\n  var createBook = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setForm(_objectSpread(_objectSpread({}, form), {}, {\n                title: bookTitle,\n                author: bookAuthor,\n                ownerID: id,\n                ownerName: name,\n                imageFront: ''\n              }));\n              _context.prev = 1;\n              // Use default image as book image if no image has been given\n\n              /*\n              if (form.imageFront==''){\n                  console.log('default image is given')\n                  console.log(prevImage)\n                  setForm({\n                      ...form,\n                   imageFront:{\n                       data: prevImage, \n                       contentType: 'image/png'\n                   }\n              \n              })\n              }\n              */\n              console.log(form.imageFront.data);\n              console.log(form); //const res = await fetch('https://unibooktrade.vercel.app/api/books', {\n\n              _context.next = 6;\n              return fetch('http://localhost:3000/api/books', {\n                method: 'PUT',\n                headers: {\n                  \"Accept\": 'application/json',\n                  \"Content-Type\": \"application/json\"\n                },\n                //body: JSON.stringify(form)\n                body: JSON.stringify({\n                  title: form.title,\n                  author: form.author,\n                  id: bookID,\n                  ownerID: id,\n                  ownerName: name,\n                  imageFront: form.imageFront\n                })\n              });\n\n            case 6:\n              res = _context.sent;\n              //Redirect to profile\n              Router.push({\n                pathname: '/myprofile',\n                query: {\n                  id: id,\n                  name: name,\n                  firstname: firstname,\n                  mytitle: '',\n                  author: ''\n                }\n              });\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 10]]);\n    }));\n\n    return function createBook() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    /*\n    setForm({\n        ...form,\n             ownerID: id,\n             ownerName: name,\n            \n     })\n    */\n\n    var errs = validate();\n    setErrors(errs);\n    setIsSubmitting(true);\n  };\n\n  var handleChange = function handleChange(e) {\n    setForm(_objectSpread(_objectSpread({}, form), {}, _defineProperty({}, e.target.name, e.target.value)));\n  };\n\n  var validate = function validate() {\n    var err = {};\n    return err;\n  }; //Handle page switch for header icons\n\n\n  var myProfile = function myProfile() {\n    Router.push({\n      pathname: '/myprofile',\n      query: {\n        mytitle: '',\n        author: '',\n        name: name,\n        id: id,\n        firstname: firstname\n      }\n    });\n  }; //Go to section to create new listing\n\n\n  var myBooks = function myBooks() {\n    Router.push({\n      pathname: '/new',\n      query: {\n        id: id,\n        name: name,\n        firstname: firstname\n      }\n    });\n  };\n\n  var Search = function Search() {\n    Router.push({\n      pathname: '/posts',\n      query: {\n        id: id,\n        name: name,\n        firstname: firstname\n      }\n    });\n  }; //Handle image upload\n\n\n  var image1Upload = function image1Upload(e) {\n    var fileInput = false;\n\n    if (e.target.files[0]) {\n      fileInput = true;\n    }\n\n    if (fileInput) {\n      Resizer.imageFileResizer(event.target.files[0], 300, 300, 'png', 100, 0, function (uri) {\n        console.log('im inside'); //Update form with new image data\n\n        setForm(_objectSpread(_objectSpread({}, form), {}, {\n          imageFront: {\n            data: uri,\n            contentType: 'image/png'\n          }\n        }));\n        console.log(form); //Update image preview\n\n        setPrevImage(uri);\n      }, 'base64');\n    }\n    /*\n    else{\n        setForm({\n            imageFront:{\n                data: form.imageFront,\n                contentType: 'image/png'\n            }\n        })\n    }\n    */\n\n  };\n\n  return __jsx(\"div\", {\n    className: \"newBook-page\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"book-greeting\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"greeting-text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"icon-box\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 13\n    }\n  }, __jsx(Link, {\n    href: \"/\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 21\n    }\n  }, __jsx(\"img\", {\n    src: \"/icons/sign-out.png\",\n    alt: \"my image\",\n    className: \"my-icon\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 25\n    }\n  })), __jsx(\"div\", {\n    className: \"my-icon-end\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 21\n    }\n  }, __jsx(\"img\", {\n    src: \"/icons/four-square.png\",\n    alt: \"my books\",\n    className: \"my-icon\",\n    onClick: myProfile,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 21\n    }\n  }), __jsx(\"img\", {\n    src: \"/icons/plus.png\",\n    alt: \"Add book\",\n    className: \"my-icon\",\n    onClick: myBooks,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 21\n    }\n  }), __jsx(\"img\", {\n    src: \"/icons/search.png\",\n    alt: \"Search\",\n    className: \"my-icon\",\n    onClick: Search,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 21\n    }\n  }))), __jsx(\"div\", {\n    style: {\n      marginTop: '65px',\n      fontSize: '18px',\n      textAlign: 'center',\n      width: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 12\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 97\n    }\n  }, \"Update your book posting\")))), __jsx(\"form\", {\n    className: \"create-book-form\",\n    onSubmit: handleSubmit,\n    style: {\n      marginTop: '3%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 9\n    }\n  }, __jsx(\"img\", {\n    src: prevImage,\n    alt: \"default-image\",\n    className: \"image-preview\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: \"form-group my-group\",\n    style: {\n      marginTop: '8%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    className: \"form-control new-book-input\",\n    id: \"exampleInputEmail1\",\n    placeholder: \"Enter book title\",\n    name: \"title\",\n    required: true,\n    onChange: handleChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 17\n    }\n  })), __jsx(\"div\", {\n    className: \"form-group my-group\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 17\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    className: \"form-control new-book-input\",\n    placeholder: \"Enter Author\",\n    name: \"author\",\n    onChange: handleChange,\n    required: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 17\n    }\n  }), __jsx(\"label\", {\n    className: \"input-file-btn\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 17\n    }\n  }, __jsx(\"input\", {\n    type: \"file\",\n    name: \"file\",\n    id: \"input-files\",\n    className: \"input-file-btn\",\n    onChange: image1Upload,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 17\n    }\n  })), __jsx(\"label\", {\n    htmlFor: \"file-upload\",\n    className: \"input-file-btn\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 15\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-success my-btn\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 17\n    }\n  }, \"Update\"))));\n}, \"hbVD5eRKALdM4ZroK1z9oD4RwwE=\", false, function () {\n  return [useRouter];\n}));\n_c2 = EditBook;\nexport default EditBook;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditBook$withRouter\");\n$RefreshReg$(_c2, \"EditBook\");","map":{"version":3,"sources":["/home/dhaneshen/Documents/booktrade/unibooktrade/pages/testing.js"],"names":["Link","useState","useEffect","fetch","useRouter","withRouter","Router","Form","Label","Resizer","fileUpload","require","EditBook","router","query","name","id","firstname","bookID","bookTitle","bookAuthor","title","author","ownerID","ownerName","imageFront","data","contentType","form","setForm","isSubmitting","setIsSubmitting","errors","setErrors","prevImage","setPrevImage","console","log","Object","keys","length","createBook","method","headers","body","JSON","stringify","res","push","pathname","mytitle","handleSubmit","e","preventDefault","errs","validate","handleChange","target","value","err","myProfile","myBooks","Search","image1Upload","fileInput","files","imageFileResizer","event","uri","marginTop","fontSize","textAlign","width"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,aAAtC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,KAAT,QAAsB,mBAAtB,C,CAEA;;AACA,OAAOC,OAAP,MAAoB,0BAApB;;AAEA,IAAMC,UAAU,GAAGC,OAAO,CAAC,YAAD,CAA1B;;AAEA,IAAMC,QAAQ,GAAGP,UAAU,SAAC,gBAAgF;AAAA;;AAAA,+BAA7EQ,MAA6E,CAAlEC,KAAkE;AAAA,MAA3DC,IAA2D,qBAA3DA,IAA2D;AAAA,MAArDC,EAAqD,qBAArDA,EAAqD;AAAA,MAAjDC,SAAiD,qBAAjDA,SAAiD;AAAA,MAAtCC,MAAsC,qBAAtCA,MAAsC;AAAA,MAA9BC,SAA8B,qBAA9BA,SAA8B;AAAA,MAAnBC,UAAmB,qBAAnBA,UAAmB;;AAAA,kBAChFnB,QAAQ,CAAC;AAAEoB,IAAAA,KAAK,EAAC,EAAR;AAAYC,IAAAA,MAAM,EAAC,EAAnB;AAAuBC,IAAAA,OAAO,EAACP,EAA/B;AAAmCQ,IAAAA,SAAS,EAACT,IAA7C;AAAmDU,IAAAA,UAAU,EAAC;AAACC,MAAAA,IAAI,EAAC,2BAAN;AAAmCC,MAAAA,WAAW,EAAC;AAA/C;AAA9D,GAAD,CADwE;AAAA,MACjGC,IADiG;AAAA,MAC3FC,OAD2F;;AAAA,mBAGhE5B,QAAQ,CAAC,KAAD,CAHwD;AAAA,MAGjG6B,YAHiG;AAAA,MAGnFC,eAHmF;;AAAA,mBAI5E9B,QAAQ,CAAC,EAAD,CAJoE;AAAA,MAIjG+B,MAJiG;AAAA,MAIzFC,SAJyF,kBAMxG;;;AANwG,mBAOtEhC,QAAQ,CAAC,2BAAD,CAP8D;AAAA,MAOjGiC,SAPiG;AAAA,MAOtFC,YAPsF;;AASxG,MAAMtB,MAAM,GAAGT,SAAS,EAAxB;AAKAF,EAAAA,SAAS,CAAC,YAAM;AACZ;AACA2B,IAAAA,OAAO,iCACAD,IADA;AAECP,MAAAA,KAAK,EAAEF,SAFR;AAGCG,MAAAA,MAAM,EAAEF,UAHT;AAICG,MAAAA,OAAO,EAAEP,EAJV;AAKCQ,MAAAA,SAAS,EAAET;AALZ,OAAP;AAQAqB,IAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAYtB,IAAxB;;AAOA,QAAIe,YAAJ,EAAiB;AACb,UAAIQ,MAAM,CAACC,IAAP,CAAYP,MAAZ,EAAoBQ,MAApB,KAA8B,CAAlC,EAAoC;AAChC;AAEA;AAGAC,QAAAA,UAAU;AACV;;;;;;;;;AAUH,OAjBD,MAkBI;AACAV,QAAAA,eAAe,CAAC,KAAD,CAAf;AACH;AACJ;AACJ,GAzCQ,EAyCN,CAACC,MAAD,CAzCM,CAAT,CAdwG,CA0DxG;;AACA,MAAMS,UAAU;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAEfZ,cAAAA,OAAO,iCACAD,IADA;AAECP,gBAAAA,KAAK,EAAEF,SAFR;AAGCG,gBAAAA,MAAM,EAAEF,UAHT;AAIEG,gBAAAA,OAAO,EAAEP,EAJX;AAKEQ,gBAAAA,SAAS,EAAET,IALb;AAMEU,gBAAAA,UAAU,EAAC;AANb,iBAAP;AAFe;AAcX;;AACA;;;;;;;;;;;;;;AAeAW,cAAAA,OAAO,CAACC,GAAR,CAAYT,IAAI,CAACH,UAAL,CAAgBC,IAA5B;AACAU,cAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ,EA/BW,CAiCX;;AAjCW;AAAA,qBAkCQzB,KAAK,CAAC,iCAAD,EAAoC;AAGxDuC,gBAAAA,MAAM,EAAE,KAHgD;AAKxDC,gBAAAA,OAAO,EAAE;AACL,4BAAU,kBADL;AAEL,kCAAgB;AAFX,iBAL+C;AASxD;AACAC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBzB,kBAAAA,KAAK,EAAEO,IAAI,CAACP,KADK;AAEjBC,kBAAAA,MAAM,EAAEM,IAAI,CAACN,MAFI;AAGjBN,kBAAAA,EAAE,EAAEE,MAHa;AAIjBK,kBAAAA,OAAO,EAAEP,EAJQ;AAKjBQ,kBAAAA,SAAS,EAAET,IALM;AAMjBU,kBAAAA,UAAU,EAAEG,IAAI,CAACH;AANA,iBAAf;AAVkD,eAApC,CAlCb;;AAAA;AAkCJsB,cAAAA,GAlCI;AA0DX;AACAzC,cAAAA,MAAM,CAAC0C,IAAP,CAAY;AACRC,gBAAAA,QAAQ,EAAE,YADF;AAERnC,gBAAAA,KAAK,EAAE;AACCE,kBAAAA,EAAE,EAAEA,EADL;AAECD,kBAAAA,IAAI,EAAEA,IAFP;AAGCE,kBAAAA,SAAS,EAAEA,SAHZ;AAICiC,kBAAAA,OAAO,EAAE,EAJV;AAKC5B,kBAAAA,MAAM,EAAE;AALT;AAFC,eAAZ;AA3DW;AAAA;;AAAA;AAAA;AAAA;AAyEXc,cAAAA,OAAO,CAACC,GAAR;;AAzEW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAVI,UAAU;AAAA;AAAA;AAAA,KAAhB;;AA8EA,MAAMU,YAAY,GAAG,SAAfA,YAAe,CAACC,CAAD,EAAO;AACxBA,IAAAA,CAAC,CAACC,cAAF;AAGA;;;;;;;;;AAUA,QAAIC,IAAI,GAAGC,QAAQ,EAAnB;AACAtB,IAAAA,SAAS,CAACqB,IAAD,CAAT;AACAvB,IAAAA,eAAe,CAAC,IAAD,CAAf;AAGH,GAnBD;;AAoBA,MAAMyB,YAAY,GAAG,SAAfA,YAAe,CAACJ,CAAD,EAAO;AAExBvB,IAAAA,OAAO,iCACAD,IADA,2BAEEwB,CAAC,CAACK,MAAF,CAAS1C,IAFX,EAEkBqC,CAAC,CAACK,MAAF,CAASC,KAF3B,GAAP;AAKH,GAPD;;AASA,MAAMH,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnB,QAAII,GAAG,GAAG,EAAV;AAGA,WAAOA,GAAP;AACH,GALD,CAtKwG,CA6KpG;;;AACA,MAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpBtD,IAAAA,MAAM,CAAC0C,IAAP,CAAY;AACRC,MAAAA,QAAQ,EAAE,YADF;AAERnC,MAAAA,KAAK,EAAE;AACCoC,QAAAA,OAAO,EAAE,EADV;AAEC5B,QAAAA,MAAM,EAAE,EAFT;AAGCP,QAAAA,IAAI,EAAEA,IAHP;AAICC,QAAAA,EAAE,EAAEA,EAJL;AAKCC,QAAAA,SAAS,EAAEA;AALZ;AAFC,KAAZ;AAWH,GAZD,CA9KoG,CA4LpG;;;AACA,MAAM4C,OAAO,GAAG,SAAVA,OAAU,GAAM;AAClBvD,IAAAA,MAAM,CAAC0C,IAAP,CAAY;AACRC,MAAAA,QAAQ,EAAE,MADF;AAERnC,MAAAA,KAAK,EAAE;AACCE,QAAAA,EAAE,EAAEA,EADL;AAECD,QAAAA,IAAI,EAAEA,IAFP;AAGCE,QAAAA,SAAS,EAAEA;AAHZ;AAFC,KAAZ;AASH,GAVD;;AAYA,MAAM6C,MAAM,GAAG,SAATA,MAAS,GAAM;AACjBxD,IAAAA,MAAM,CAAC0C,IAAP,CAAY;AACRC,MAAAA,QAAQ,EAAE,QADF;AAERnC,MAAAA,KAAK,EAAE;AACCE,QAAAA,EAAE,EAAEA,EADL;AAECD,QAAAA,IAAI,EAAEA,IAFP;AAGCE,QAAAA,SAAS,EAAEA;AAHZ;AAFC,KAAZ;AASH,GAVD,CAzMoG,CAqNpG;;;AACA,MAAM8C,YAAY,GAAG,SAAfA,YAAe,CAACX,CAAD,EAAO;AAG7B,QAAIY,SAAS,GAAG,KAAhB;;AACA,QAAIZ,CAAC,CAACK,MAAF,CAASQ,KAAT,CAAe,CAAf,CAAJ,EAAsB;AAClBD,MAAAA,SAAS,GAAG,IAAZ;AACH;;AACD,QAAIA,SAAJ,EAAe;AACXvD,MAAAA,OAAO,CAACyD,gBAAR,CACCC,KAAK,CAACV,MAAN,CAAaQ,KAAb,CAAmB,CAAnB,CADD,EAEC,GAFD,EAGC,GAHD,EAIC,KAJD,EAKC,GALD,EAMC,CAND,EAOC,UAAAG,GAAG,EAAI;AACHhC,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EADG,CAGH;;AACAR,QAAAA,OAAO,iCACAD,IADA;AAENH,UAAAA,UAAU,EAAC;AACPC,YAAAA,IAAI,EAAE0C,GADC;AAEPzC,YAAAA,WAAW,EAAE;AAFN;AAFL,WAAP;AAWJS,QAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ,EAfO,CAiBP;;AACAO,QAAAA,YAAY,CAACiC,GAAD,CAAZ;AAEC,OA3BF,EA4BC,QA5BD;AA+BH;AACD;;;;;;;;;;;AAYE,GApDD;;AAyDJ,SACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACQ,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,GAAG,EAAC,qBAAT;AAA+B,IAAA,GAAG,EAAC,UAAnC;AAA8C,IAAA,SAAS,EAAC,SAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADR,EAKQ;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAK,IAAA,GAAG,EAAC,wBAAT;AAAkC,IAAA,GAAG,EAAC,UAAtC;AAAiD,IAAA,SAAS,EAAC,SAA3D;AAAqE,IAAA,OAAO,EAAER,SAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAGA;AAAK,IAAA,GAAG,EAAC,iBAAT;AAA2B,IAAA,GAAG,EAAC,UAA/B;AAA0C,IAAA,SAAS,EAAC,SAApD;AAA8D,IAAA,OAAO,EAAEC,OAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHA,EAKA;AAAK,IAAA,GAAG,EAAC,mBAAT;AAA6B,IAAA,GAAG,EAAC,QAAjC;AAA0C,IAAA,SAAS,EAAC,SAApD;AAA8D,IAAA,OAAO,EAAEC,MAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALA,CALR,CADA,EAqBD;AAAK,IAAA,KAAK,EAAE;AAAEO,MAAAA,SAAS,EAAC,MAAZ;AAAoBC,MAAAA,QAAQ,EAAC,MAA7B;AAAqCC,MAAAA,SAAS,EAAC,QAA/C;AAAyDC,MAAAA,KAAK,EAAC;AAA/D,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAArF,CArBC,CADA,CADJ,EA+BA;AAAM,IAAA,SAAS,EAAC,kBAAhB;AAAmC,IAAA,QAAQ,EAAErB,YAA7C;AAA2D,IAAA,KAAK,EAAE;AAAEkB,MAAAA,SAAS,EAAC;AAAZ,KAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAK,IAAA,GAAG,EAAEnC,SAAV;AAAqB,IAAA,GAAG,EAAC,eAAzB;AAAyC,IAAA,SAAS,EAAC,eAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAEA;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAqC,IAAA,KAAK,EAAE;AAACmC,MAAAA,SAAS,EAAC;AAAX,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACQ;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,SAAS,EAAC,6BAFd;AAGI,IAAA,EAAE,EAAC,oBAHP;AAII,IAAA,WAAW,EAAC,kBAJhB;AAKI,IAAA,IAAI,EAAC,OALT;AAMI,IAAA,QAAQ,MANZ;AAOI,IAAA,QAAQ,EAAEb,YAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADR,CAFA,EAaQ;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,SAAS,EAAC,6BAFd;AAGI,IAAA,WAAW,EAAC,cAHhB;AAII,IAAA,IAAI,EAAC,QAJT;AAKI,IAAA,QAAQ,EAAEA,YALd;AAMI,IAAA,QAAQ,MANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAUA;AAAO,IAAA,SAAS,EAAC,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AACA,IAAA,IAAI,EAAC,MADL;AAEA,IAAA,IAAI,EAAC,MAFL;AAGA,IAAA,EAAE,EAAC,aAHH;AAIA,IAAA,SAAS,EAAC,gBAJV;AAKA,IAAA,QAAQ,EAAEO,YALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CAVA,EAoBF;AAAO,IAAA,OAAO,EAAC,aAAf;AAA6B,IAAA,SAAS,EAAC,gBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBE,EAwBA;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,wBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAxBA,CAbR,CA/BA,CADJ;AA2EH,CA1V0B;AAAA,UASR3D,SATQ;AAAA,GAA3B;MAAMQ,Q;AA+VN,eAAeA,QAAf","sourcesContent":["import Link from 'next/link';\nimport { useState, useEffect } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter, withRouter } from 'next/router';\nimport Router from 'next/router';\n\nimport { Form } from 'react-bootstrap';\nimport { Label } from 'semantic-ui-react';\n\n//Image resize\nimport Resizer from 'react-image-file-resizer';\n\nconst fileUpload = require('fuctbase64');\n\nconst EditBook = withRouter(({ router:  { query:{name, id, firstname, bookID, bookTitle, bookAuthor}}} ) => {\n    const [form, setForm] = useState({ title:'', author:'', ownerID:id, ownerName:name, imageFront:{data:'/static/default-image.svg', contentType:'image/png'}}\n    );\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [errors, setErrors] = useState({});\n\n    //state of the preview image\n    const [prevImage, setPrevImage] = useState('/static/default-image.svg');\n\n    const router = useRouter();\n\n\n\n    \n    useEffect(() => {\n        // Set form data to that from Router\n        setForm({\n            ...form,\n                title: bookTitle,\n                author: bookAuthor,\n                ownerID: id,\n                ownerName: name\n        })\n\n        console.log(form);\n        console.log('name is '+ name)\n\n\n\n\n\n\n        if (isSubmitting){\n            if (Object.keys(errors).length ===0){\n                //bookmatch();\n\n                //alert('New book created')\n\n\n                createBook();\n                /*\n                Router.push({\n                    pathname: '/booklist',\n                    query: { \n                            mytitle: form.title,\n                            author: form.author\n                            \n                    }\n                });*/\n              \n            }\n            else{\n                setIsSubmitting(false);\n            }\n        }\n    }, [errors])\n\n\n    //Create new book post\n    const createBook = async () => {\n\n        setForm({\n            ...form,\n                title: bookTitle,\n                author: bookAuthor,\n                 ownerID: id,\n                 ownerName: name,\n                 imageFront:''\n        })\n\n        \n        try {\n\n            // Use default image as book image if no image has been given\n            /*\n            if (form.imageFront==''){\n                console.log('default image is given')\n                console.log(prevImage)\n                setForm({\n                    ...form,\n                 imageFront:{\n                     data: prevImage, \n                     contentType: 'image/png'\n                 }\n            \n            })\n            }\n            */\n\n            console.log(form.imageFront.data);\n            console.log(form)\n            \n            //const res = await fetch('https://unibooktrade.vercel.app/api/books', {\n             const res = await fetch('http://localhost:3000/api/books', {\n\n\n                method: 'PUT',\n                \n                headers: {\n                    \"Accept\": 'application/json',\n                    \"Content-Type\": \"application/json\"\n                },\n                //body: JSON.stringify(form)\n                body: JSON.stringify({\n                    title: form.title,\n                    author: form.author,\n                    id: bookID,\n                    ownerID: id,\n                    ownerName: name,\n                    imageFront: form.imageFront,\n                })\n               \n            })\n\n            \n            \n            \n            //Redirect to profile\n            Router.push({\n                pathname: '/myprofile',\n                query: { \n                        id: id,\n                        name: name,\n                        firstname: firstname,\n                        mytitle: '',\n                        author: ''\n                        \n                }\n            });\n            \n\n        } catch (error) {\n            console.log(error)\n\n        }\n    }\n\n    const handleSubmit = (e) => { \n        e.preventDefault();\n\n\n        /*\n        setForm({\n            ...form,\n                 ownerID: id,\n                 ownerName: name,\n                \n\n        })\n        */\n\n        let errs = validate();\n        setErrors(errs);\n        setIsSubmitting(true);\n\n\n    }\n    const handleChange = (e) => { \n\n        setForm({\n            ...form,\n                [e.target.name]: e.target.value\n            \n        })\n    }\n\n    const validate = () => {\n        let err = {};\n\n        \n        return err;\n    }\n\n        //Handle page switch for header icons\n        const myProfile = () => {\n            Router.push({\n                pathname: '/myprofile',\n                query: { \n                        mytitle: '',\n                        author: '',\n                        name: name,\n                        id: id,\n                        firstname: firstname\n                        \n                }\n            });\n        }\n    \n        //Go to section to create new listing\n        const myBooks = () => {\n            Router.push({\n                pathname: '/new',\n                query: { \n                        id: id,\n                        name: name,\n                        firstname: firstname\n                        \n                }\n            });\n        }\n\n        const Search = () => {\n            Router.push({\n                pathname: '/posts',\n                query: { \n                        id: id,\n                        name: name,\n                        firstname: firstname\n                        \n                }\n            });\n        }\n\n        //Handle image upload\n        const image1Upload = (e) => {\n\n\n       var fileInput = false;\n       if (e.target.files[0]){\n           fileInput = true;\n       }\n       if (fileInput) {\n           Resizer.imageFileResizer(\n            event.target.files[0],\n            300,\n            300,\n            'png',\n            100,\n            0,\n            uri => {\n                console.log('im inside')\n\n                //Update form with new image data\n                setForm({\n                    ...form,\n                 imageFront:{\n                     data: uri, \n                     contentType: 'image/png'\n                 }\n            \n            })\n            \n\n\n            console.log(form)\n\n            //Update image preview\n            setPrevImage(uri);\n            \n            },\n            'base64'\n\n           );\n       }\n       /*\n       else{\n           setForm({\n               imageFront:{\n                   data: form.imageFront,\n                   contentType: 'image/png'\n               }\n           })\n       }\n       */\n\n       \n        }\n\n        \n           \n\n    return (\n        <div className='newBook-page'>\n            <div className='book-greeting'>\n            <div className='greeting-text'>\n            <div className='icon-box'>\n                    <Link href='/'>\n                        <img src=\"/icons/sign-out.png\" alt=\"my image\" className='my-icon'/>\n                    </Link>\n                    \n                    <div className='my-icon-end'>\n                    <img src=\"/icons/four-square.png\" alt=\"my books\" className='my-icon' onClick={myProfile}/>\n                    \n                    <img src=\"/icons/plus.png\" alt=\"Add book\" className='my-icon' onClick={myBooks}/>\n                    \n                    <img src=\"/icons/search.png\" alt=\"Search\" className='my-icon' onClick={Search}/>\n                    </div>\n                    \n\n\n                    \n            </div>\n\n\n            \n           <div style={{ marginTop:'65px', fontSize:'18px', textAlign:'center', width:'100%' }}><p>Update your book posting</p></div>\n\n\n                \n            </div>\n                \n        </div>\n           \n        <form className='create-book-form' onSubmit={handleSubmit} style={{ marginTop:'3%' }}>\n        <img src={prevImage} alt='default-image' className='image-preview'/>\n        <div className=\"form-group my-group\" style={{marginTop:'8%'}}>\n                <input \n                    type=\"text\" \n                    className=\"form-control new-book-input\" \n                    id=\"exampleInputEmail1\" \n                    placeholder=\"Enter book title\"\n                    name=\"title\"\n                    required\n                    onChange={handleChange}/>\n                    \n                </div>\n                <div className=\"form-group my-group\">\n                <input \n                    type=\"text\" \n                    className=\"form-control new-book-input\" \n                    placeholder=\"Enter Author\"\n                    name='author'\n                    onChange={handleChange}\n                    required\n                    />\n                \n                <label className='input-file-btn'>\n                <input\n                type=\"file\"\n                name=\"file\"\n                id=\"input-files\"\n                className='input-file-btn'\n                onChange={image1Upload}\n              />\n              </label>\n\n              <label htmlFor=\"file-upload\" className=\"input-file-btn\" >\n            </label>\n            \n\n                <button type=\"submit\" className=\"btn btn-success my-btn\">Update</button>\n                </div>\n                </form>\n            \n        </div>\n    )\n});\n\n\n\n\nexport default EditBook;"]},"metadata":{},"sourceType":"module"}