{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter, withRouter } from 'next/router';\nimport Router from 'next/router';\nimport Head from 'next/head';\nimport { Form } from 'react-bootstrap';\nimport { Label } from 'semantic-ui-react'; //Toast\n\nimport { ToastContainer, toast } from 'react-toastify'; //Image resize\n\nimport Resizer from 'react-image-file-resizer';\nimport { SingleEntryPlugin } from 'webpack';\n\nvar fileUpload = require('fuctbase64');\n\nvar EditBook = withRouter(function (_ref) {\n  var _ref$router$query = _ref.router.query,\n      name = _ref$router$query.name,\n      id = _ref$router$query.id,\n      firstname = _ref$router$query.firstname,\n      bookID = _ref$router$query.bookID,\n      bookTitle = _ref$router$query.bookTitle,\n      bookAuthor = _ref$router$query.bookAuthor,\n      price = _ref$router$query.price,\n      userEmail = _ref$router$query.userEmail;\n\n  var _useState = useState({\n    title: bookTitle,\n    author: bookAuthor,\n    ownerID: id,\n    ownerName: name,\n    imageFront: {\n      data: '/static/default-image.svg',\n      contentType: 'image/png'\n    },\n    price: price,\n    userEmail: userEmail\n  }),\n      form = _useState[0],\n      setForm = _useState[1];\n\n  var _useState2 = useState(false),\n      isSubmitting = _useState2[0],\n      setIsSubmitting = _useState2[1];\n\n  var _useState3 = useState({}),\n      errors = _useState3[0],\n      setErrors = _useState3[1]; //state of the preview image\n\n\n  var _useState4 = useState('/static/default-image.svg'),\n      prevImage = _useState4[0],\n      setPrevImage = _useState4[1];\n\n  var router = useRouter();\n  console.log('Email is', form.userEmail);\n  useEffect(function () {\n    // Set form data to that from Router\n    setForm(_objectSpread(_objectSpread({}, form), {}, {\n      title: bookTitle,\n      author: bookAuthor,\n      ownerID: id,\n      ownerName: name,\n      userEmail: userEmail\n    }));\n    console.log(form);\n    console.log('name is ' + name);\n\n    if (isSubmitting) {\n      if (Object.keys(errors).length === 0) {\n        //bookmatch();\n        //alert('New book created')\n        createBook();\n        /*\n        Router.push({\n            pathname: '/booklist',\n            query: { \n                    mytitle: form.title,\n                    author: form.author\n                    \n            }\n        });*/\n      } else {\n        setIsSubmitting(false);\n      }\n    }\n  }, [errors]); //Create new book post\n\n  var createBook = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setForm(_objectSpread(_objectSpread({}, form), {}, {\n                title: bookTitle,\n                author: bookAuthor,\n                ownerID: id,\n                ownerName: name,\n                imageFront: '',\n                price: price,\n                userEmail: userEmail\n              }));\n              _context.prev = 1;\n              notify();\n              _context.next = 5;\n              return fetch('https://usedbooksexchange.com/api/books', {\n                //const res = await fetch('http://localhost:3000/api/books', {\n                method: 'PUT',\n                headers: {\n                  \"Accept\": 'application/json',\n                  \"Content-Type\": \"application/json\"\n                },\n                //body: JSON.stringify(form)\n                body: JSON.stringify({\n                  title: form.title,\n                  author: form.author,\n                  id: bookID,\n                  ownerID: id,\n                  ownerName: name,\n                  imageFront: form.imageFront,\n                  price: form.price,\n                  userEmail: userEmail\n                })\n              });\n\n            case 5:\n              res = _context.sent;\n\n              /*\n                          notifyDone().then(\n              \n                              //Redirect to profile\n                          Router.push({\n                              pathname: '/myprofile',\n                              query: { \n                                      id: id,\n                                      name: name,\n                                      firstname: firstname,\n                                      mytitle: '',\n                                      author: '',\n                                      userEmail: userEmail\n              \n                                      \n                              }\n                          },'/myprofile')\n              \n                          )\n                          */\n              //Redirect to profile\n              Router.push({\n                pathname: '/myprofile',\n                query: {\n                  id: id,\n                  name: name,\n                  firstname: firstname,\n                  mytitle: '',\n                  author: '',\n                  userEmail: userEmail\n                }\n              }, '/myprofile');\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 9]]);\n    }));\n\n    return function createBook() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    /*\n    setForm({\n        ...form,\n             ownerID: id,\n             ownerName: name,\n            \n     })\n    */\n\n    var errs = validate();\n    setErrors(errs);\n    setIsSubmitting(true);\n  };\n\n  var handleChange = function handleChange(e) {\n    setForm(_objectSpread(_objectSpread({}, form), {}, _defineProperty({}, e.target.name, e.target.value)));\n  };\n\n  var validate = function validate() {\n    var err = {};\n    return err;\n  }; //Handle page switch for header icons\n\n\n  var myProfile = function myProfile() {\n    Router.push({\n      pathname: '/myprofile',\n      query: {\n        mytitle: '',\n        author: '',\n        name: name,\n        id: id,\n        firstname: firstname,\n        userEmail: userEmail\n      }\n    }, '/myprofile');\n  }; //Go to section to create new listing\n\n\n  var myBooks = function myBooks() {\n    Router.push({\n      pathname: '/new',\n      query: {\n        id: id,\n        name: name,\n        firstname: firstname,\n        userEmail: userEmail\n      }\n    }, '/new');\n  };\n\n  var Search = function Search() {\n    Router.push({\n      pathname: '/posts',\n      query: {\n        id: id,\n        name: name,\n        firstname: firstname,\n        userEmail: userEmail\n      }\n    }, '/search');\n  }; //Handle image upload\n\n\n  var image1Upload = function image1Upload(e) {\n    var fileInput = false;\n\n    if (e.target.files[0]) {\n      fileInput = true;\n    }\n\n    if (fileInput) {\n      Resizer.imageFileResizer(event.target.files[0], 300, 300, 'png', 100, 0, function (uri) {\n        console.log('im inside'); //Update form with new image data\n\n        setForm(_objectSpread(_objectSpread({}, form), {}, {\n          imageFront: {\n            data: uri,\n            contentType: 'image/png'\n          }\n        }));\n        console.log(form); //Update image preview\n\n        setPrevImage(uri);\n      }, 'base64');\n    }\n    /*\n    else{\n        setForm({\n            imageFront:{\n                data: form.imageFront,\n                contentType: 'image/png'\n            }\n        })\n    }\n    */\n\n  };\n\n  var aboutUs = function aboutUs() {\n    Router.push({\n      pathname: '/aboutus',\n      query: {\n        id: id,\n        name: name,\n        firstname: firstname,\n        userEmail: userEmail\n      }\n    });\n  }; //Toast functions\n\n\n  var notify = function notify() {\n    return toast(\"Updating post\");\n  };\n\n  var notifyDone = function notifyDone() {\n    return toast(\"Post updated\");\n  };\n\n  return __jsx(\"div\", {\n    className: \"newBook-page\"\n  }, __jsx(Head, null, __jsx(\"title\", null, \"Edit post, MacEwan Book Trade\")), __jsx(\"div\", {\n    className: \"book-greeting\"\n  }, __jsx(\"div\", {\n    className: \"greeting-text\"\n  }, __jsx(\"div\", {\n    className: \"icon-box\"\n  }, __jsx(Link, {\n    href: \"/\"\n  }, __jsx(\"img\", {\n    src: \"/icons/sign-out.png\",\n    alt: \"my image\",\n    className: \"my-icon\"\n  })), __jsx(\"img\", {\n    onClick: aboutUs,\n    src: \"/icons/info.svg\",\n    alt: \"About us\",\n    className: \"my-icon btn-aboutUs\"\n  }), __jsx(\"div\", {\n    className: \"my-icon-end\"\n  }, __jsx(\"img\", {\n    src: \"/icons/four-square.png\",\n    alt: \"my books\",\n    className: \"my-icon\",\n    onClick: myProfile\n  }), __jsx(\"img\", {\n    src: \"/icons/plus.png\",\n    alt: \"Add book\",\n    className: \"my-icon\",\n    onClick: myBooks\n  }), __jsx(\"img\", {\n    src: \"/icons/search.png\",\n    alt: \"Search\",\n    className: \"my-icon\",\n    onClick: Search\n  }))), __jsx(\"div\", {\n    style: {\n      marginTop: '65px',\n      fontSize: '18px',\n      textAlign: 'center',\n      width: '100%'\n    }\n  }, __jsx(\"p\", null, \"Update your book posting\")))), __jsx(\"form\", {\n    className: \"create-book-form\",\n    onSubmit: handleSubmit,\n    style: {\n      marginTop: '10%'\n    }\n  }, __jsx(\"img\", {\n    src: prevImage,\n    alt: \"default-image\",\n    className: \"image-preview\"\n  }), __jsx(\"div\", {\n    className: \"form-group my-group\",\n    style: {\n      marginTop: '8%'\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    className: \"form-control new-book-input\",\n    id: \"exampleInputEmail1\",\n    placeholder: \"Enter book title\",\n    name: \"title\",\n    value: form.title,\n    required: true,\n    onChange: handleChange\n  })), __jsx(\"div\", {\n    className: \"form-group my-group\"\n  }, __jsx(\"input\", {\n    type: \"text\",\n    className: \"form-control new-book-input\",\n    placeholder: \"Enter Author\",\n    name: \"author\",\n    onChange: handleChange,\n    value: form.author,\n    required: true\n  }), __jsx(\"input\", {\n    type: \"text\",\n    className: \"form-control new-book-input\",\n    placeholder: \"Price\",\n    name: \"price\",\n    style: {\n      marginTop: '5%'\n    },\n    value: form.price,\n    onChange: handleChange,\n    required: true\n  }), __jsx(\"label\", {\n    className: \"input-file-btn\"\n  }, __jsx(\"input\", {\n    type: \"file\",\n    name: \"file\",\n    id: \"input-files\",\n    className: \"input-file-btn\",\n    onChange: image1Upload\n  })), __jsx(\"label\", {\n    htmlFor: \"file-upload\",\n    className: \"input-file-btn\"\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-success my-btn\"\n  }, \"Update\"))), __jsx(ToastContainer, null));\n});\nexport default EditBook;","map":null,"metadata":{},"sourceType":"module"}