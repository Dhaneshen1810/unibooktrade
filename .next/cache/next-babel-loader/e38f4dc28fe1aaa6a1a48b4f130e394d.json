{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danmo\\\\book-trade\\\\pages\\\\booklist.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { withRouter } from \"next/router\";\nimport Router from \"next/router\";\nimport Link from 'next/link'; //Getting book data from database\n\nimport fetch from 'isomorphic-unfetch';\nconst posts = withRouter(({\n  router: {\n    query: {\n      name,\n      id,\n      firstname,\n      mytitle,\n      author\n    }\n  },\n  books\n}) => {\n  while (!books) {}\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"book-greeting\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"greeting-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }\n  }, \"Name: \", name), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  }, \"Id: \", id), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }\n  }, \"Firstname: \", firstname), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }, \"title: \", mytitle), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }, \"Author: \", author), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  }, \"Find your book by entering the \", __jsx(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 25\n    }\n  }, \"Author\"), \" or \", __jsx(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 42\n    }\n  }, \"Book name below.\")))), __jsx(\"div\", {\n    className: \"book-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, books.map(book => {\n    return __jsx(\"div\", {\n      key: book._id,\n      className: \"book-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 25\n      }\n    }, \"Title: \", book.title), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 25\n      }\n    }, \"Author: \", book.author), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 25\n      }\n    }, \"Owner: \", book.ownerID), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 25\n      }\n    }, \"Book id: \", book._id));\n  })));\n}); //posts.getInitialProps = async (mytitle) =>{\n\nposts.getServerSideProps = async mytitle => {\n  const res = await fetch('http://localhost:3000/api/books', {\n    headers: {\n      title: mytitle.query.mytitle,\n      author: mytitle.query.author\n    }\n  });\n  const {\n    data\n  } = await res.json();\n  return {\n    books: data\n  };\n};\n\nexport default posts;","map":{"version":3,"sources":["C:/Users/danmo/book-trade/pages/booklist.js"],"names":["withRouter","Router","Link","fetch","posts","router","query","name","id","firstname","mytitle","author","books","map","book","_id","title","ownerID","getServerSideProps","res","headers","data","json"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,aAA3B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB,C,CAEA;;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAIA,MAAMC,KAAK,GAAGJ,UAAU,CAAC,CAAC;AAAEK,EAAAA,MAAM,EAAG;AAAEC,IAAAA,KAAK,EAAC;AAACC,MAAAA,IAAD;AAAOC,MAAAA,EAAP;AAAWC,MAAAA,SAAX;AAAsBC,MAAAA,OAAtB;AAA+BC,MAAAA;AAA/B;AAAR,GAAX;AAA4DC,EAAAA;AAA5D,CAAD,KAAyE;AAG9F,SAAM,CAACA,KAAP,EAAa,CAGZ;;AAGD,SAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAUL,IAAV,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAQC,EAAR,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAeC,SAAf,CAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAWC,OAAX,CAJJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAYC,MAAZ,CALJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADR,UACyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADzB,CANJ,CADJ,CANJ,EAsBI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKCC,KAAK,CAACC,GAAN,CAAWC,IAAI,IAAI;AAGZ,WACI;AAAK,MAAA,GAAG,EAAEA,IAAI,CAACC,GAAf;AAAoB,MAAA,SAAS,EAAC,WAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAWD,IAAI,CAACE,KAAhB,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAYF,IAAI,CAACH,MAAjB,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAWG,IAAI,CAACG,OAAhB,CAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAaH,IAAI,CAACC,GAAlB,CAJJ,CADJ;AAUP,GAbA,CALD,CAtBJ,CAFA;AA+CF,CAxDsB,CAAxB,C,CA2DA;;AACIX,KAAK,CAACc,kBAAN,GAA2B,MAAOR,OAAP,IAAkB;AAGzC,QAAMS,GAAG,GAAG,MAAMhB,KAAK,CAAC,iCAAD,EAAoC;AAC3DiB,IAAAA,OAAO,EAAE;AACLJ,MAAAA,KAAK,EAAEN,OAAO,CAACJ,KAAR,CAAcI,OADhB;AAELC,MAAAA,MAAM,EAAED,OAAO,CAACJ,KAAR,CAAcK;AAFjB;AADkD,GAApC,CAAvB;AASA,QAAM;AAAEU,IAAAA;AAAF,MAAW,MAAMF,GAAG,CAACG,IAAJ,EAAvB;AAEA,SAAM;AAAEV,IAAAA,KAAK,EAAES;AAAT,GAAN;AAGP,CAjBG;;AAoBJ,eAAejB,KAAf","sourcesContent":["import { withRouter } from \"next/router\";\r\nimport Router from \"next/router\";\r\nimport Link from 'next/link';\r\n\r\n//Getting book data from database\r\nimport fetch from 'isomorphic-unfetch';\r\n\r\n\r\n\r\nconst posts = withRouter(({ router:  { query:{name, id, firstname, mytitle, author}}, books} ) => {\r\n\r\n\r\n    while(!books){\r\n\r\n        \r\n    }\r\n    \r\n  \r\n    return(\r\n\r\n    <div>\r\n\r\n\r\n    \r\n            \r\n        \r\n        <div className='book-greeting'>\r\n            <div className='greeting-text'>\r\n                <p>Name: {name}</p>\r\n                <p>Id: {id}</p>\r\n                <p>Firstname: {firstname}</p>\r\n                <p>title: {mytitle}</p>\r\n                <p>Author: {author}</p>\r\n                <p>Find your book by entering \r\n                    the <b>Author</b> or <b>Book name\r\n                        below.\r\n                    </b>\r\n                </p>\r\n            </div>\r\n            \r\n        </div>\r\n        \r\n        <div className='book-list'>\r\n              \r\n      \r\n      \r\n\r\n        {books.map( book => {\r\n            \r\n    \r\n                return (\r\n                    <div key={book._id} className='book-item'>\r\n                        <p>Title: {book.title}</p>\r\n                        <p>Author: {book.author}</p>\r\n                        <p>Owner: {book.ownerID}</p>\r\n                        <p>Book id: {book._id}</p>\r\n                        \r\n                    </div>\r\n                )\r\n            \r\n        })}\r\n    \r\n    \r\n        </div>        \r\n    </div>\r\n)});\r\n\r\n\r\n//posts.getInitialProps = async (mytitle) =>{\r\n    posts.getServerSideProps = async (mytitle) =>{\r\n\r\n    \r\n        const res = await fetch('http://localhost:3000/api/books', {\r\n        headers: {\r\n            title: mytitle.query.mytitle,\r\n            author: mytitle.query.author\r\n        }\r\n    });\r\n\r\n    \r\n  \r\n        const { data } = await res.json();\r\n\r\n        return{ books: data }\r\n   \r\n    \r\n}\r\n\r\n    \r\nexport default posts;"]},"metadata":{},"sourceType":"module"}