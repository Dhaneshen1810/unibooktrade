{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport mongoose from 'mongoose';\nconsole.log('inside dbConnect');\nvar connection = {}; //mongoose.set('useFindAndModify', false);\n\nconsole.log('Trying to connect to db.');\n\nfunction dbConnect() {\n  return _dbConnect.apply(this, arguments);\n}\n\nfunction _dbConnect() {\n  _dbConnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var db;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log('Above if statement.');\n\n            if (!connection.isConnected) {\n              _context.next = 4;\n              break;\n            }\n\n            console.log('db on from first call');\n            return _context.abrupt(\"return\", 1);\n\n          case 4:\n            console.log('awaiting for db connection');\n            _context.next = 7;\n            return mongoose.connect(process.env.MONGO_URI, {//useNewUrlParser: true\n              //useUnifiedTopology: true\n            });\n\n          case 7:\n            db = _context.sent;\n\n            if (db.connections) {\n              console.log('\\nConnection exist');\n            } else {\n              console.log('no connections found');\n            }\n\n            connection.isConnected = db.connections[0].readyState;\n            console.log(connection.isConnected);\n            console.log('db is on.');\n\n            if (!connection.isConnected) {\n              _context.next = 15;\n              break;\n            }\n\n            console.log('db on from second call');\n            return _context.abrupt(\"return\", 1);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _dbConnect.apply(this, arguments);\n}\n\nexport default dbConnect;","map":{"version":3,"sources":["/home/dhaneshen/Documents/booktrade/unibooktrade/utils/dbConnect.js"],"names":["mongoose","console","log","connection","dbConnect","isConnected","connect","process","env","MONGO_URI","db","connections","readyState"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,UAArB;AAEAC,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAEA,IAAMC,UAAU,GAAG,EAAnB,C,CACA;;AAGAF,OAAO,CAACC,GAAR,CAAY,0BAAZ;;SACeE,S;;;;;wEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAEIH,YAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;;AAFJ,iBAIQC,UAAU,CAACE,WAJnB;AAAA;AAAA;AAAA;;AAKQJ,YAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AALR,6CAMe,CANf;;AAAA;AAUID,YAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AAVJ;AAAA,mBAYoBF,QAAQ,CAACM,OAAT,CAAiBC,OAAO,CAACC,GAAR,CAAYC,SAA7B,EAAwC,CACxD;AACA;AAFwD,aAAxC,CAZpB;;AAAA;AAYSC,YAAAA,EAZT;;AAkBA,gBAAIA,EAAE,CAACC,WAAP,EAAmB;AACfV,cAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH,aAFD,MAGI;AACAD,cAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH;;AAKGC,YAAAA,UAAU,CAACE,WAAX,GAAyBK,EAAE,CAACC,WAAH,CAAe,CAAf,EAAkBC,UAA3C;AACAX,YAAAA,OAAO,CAACC,GAAR,CAAYC,UAAU,CAACE,WAAvB;AACAJ,YAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;;AA9BJ,iBA+BQC,UAAU,CAACE,WA/BnB;AAAA;AAAA;AAAA;;AAgCQJ,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AAhCR,6CAiCe,CAjCf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAuCA,eAAeE,SAAf","sourcesContent":["import mongoose from 'mongoose';\n\nconsole.log('inside dbConnect');\n\nconst connection = {};\n//mongoose.set('useFindAndModify', false);\n\n\nconsole.log('Trying to connect to db.');\nasync function dbConnect(){\n    \n    console.log('Above if statement.')\n    \n    if (connection.isConnected) {\n        console.log('db on from first call')\n        return 1;\n    }\n    \n\n    console.log('awaiting for db connection')\n    \n   const db = await mongoose.connect(process.env.MONGO_URI, {\n    //useNewUrlParser: true\n    //useUnifiedTopology: true\n})\n   \n\nif (db.connections){\n    console.log('\\nConnection exist')\n}\nelse{\n    console.log('no connections found')\n}\n\n  \n    \n\n    connection.isConnected = db.connections[0].readyState;\n    console.log(connection.isConnected);\n    console.log('db is on.')\n    if (connection.isConnected) {\n        console.log('db on from second call')\n        return 1;\n    }\n    \n\n}\n\nexport default dbConnect;"]},"metadata":{},"sourceType":"module"}