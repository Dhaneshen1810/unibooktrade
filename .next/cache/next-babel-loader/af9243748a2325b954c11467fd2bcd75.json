{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport Router from 'next/router';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport { withRouter } from 'next/router';\nimport fetch from 'isomorphic-unfetch';\nimport { Credentials } from 'aws-sdk';\nvar contact = withRouter(function (_ref) {\n  var _ref$router$query = _ref.router.query,\n      name = _ref$router$query.name,\n      id = _ref$router$query.id,\n      firstname = _ref$router$query.firstname,\n      bookID = _ref$router$query.bookID,\n      bookOwnerName = _ref$router$query.bookOwnerName,\n      ownerFirstName = _ref$router$query.ownerFirstName,\n      bookOwnerID = _ref$router$query.bookOwnerID,\n      bookTitle = _ref$router$query.bookTitle,\n      userEmail = _ref$router$query.userEmail,\n      ownerEmail = _ref$router$query.ownerEmail,\n      books = _ref.books;\n\n  var _useState = useState([]),\n      booklist = _useState[0],\n      setBooklist = _useState[1];\n\n  var _useState2 = useState('mailto:' + ownerEmail),\n      sendTo = _useState2[0],\n      setSendTo = _useState2[1];\n  /* Deal with AWS SES */\n  // Load the AWS SDK for Node.js\n\n\n  var AWS = require('aws-sdk'); //AWS.config.loadFromPath('./config.json');\n  // Set the region \n\n  /*\n  AWS.config.update({\n      region: 'ca-central-1'\n      \n  });\n  */\n\n\n  AWS.config.update({\n    accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n    region: \"us-east-2\"\n  });\n  console.log('email is ' + ownerEmail);\n  console.log('Owner email:', userEmail); // Create the promise and SES service object\n  //var sendPromise = new AWS.SES({apiVersion: '2010-12-01'}).sendBulkTemplatedEmail(params).promise();\n\n  /* End of AWS SES */\n  // Assign constant names to values obtained from 'booklist' via withRouter\n\n  useEffect(function () {\n    var userName = name;\n    var userID = id;\n    var userFirstname = firstname;\n    setBooklist(books);\n    console.log('booklist is');\n    console.log(booklist);\n  }); // Redirect to myprofile\n\n  var myProfile = function myProfile() {\n    Router.push({\n      pathname: '/myprofile',\n      query: {\n        mytitle: '',\n        author: '',\n        name: name,\n        id: id,\n        firstname: firstname,\n        userEmail: userEmail\n      }\n    }, '/myprofile');\n  }; // Redirect to new for creating new post\n\n\n  var myBooks = function myBooks() {\n    Router.push({\n      pathname: '/new',\n      query: {\n        id: id,\n        name: name,\n        firstname: firstname,\n        userEmail: userEmail\n      }\n    }, '/new');\n  }; // Redirect posts\n\n\n  var Search = function Search() {\n    Router.push({\n      pathname: '/posts',\n      query: {\n        id: id,\n        name: name,\n        firstname: firstname,\n        userEmail: userEmail\n      }\n    }, '/search');\n  };\n\n  var aboutUs = function aboutUs() {\n    Router.push({\n      pathname: '/aboutus',\n      query: {\n        id: id,\n        name: name,\n        firstname: firstname,\n        userEmail: userEmail\n      }\n    }, '/aboutus');\n  }; // Display on screen\n\n\n  return __jsx(\"div\", {\n    className: \"contact-page\"\n  }, __jsx(Head, null, __jsx(\"title\", null, \"Contact owner, MacEwan Book Trade\")), __jsx(\"div\", {\n    className: \"book-greeting\"\n  }, __jsx(\"div\", {\n    className: \"greeting-text\"\n  }, __jsx(\"div\", {\n    className: \"icon-box\"\n  }, __jsx(Link, {\n    href: \"/\"\n  }, __jsx(\"img\", {\n    src: \"/icons/sign-out.png\",\n    alt: \"my image\",\n    className: \"my-icon\"\n  })), __jsx(\"img\", {\n    onClick: aboutUs,\n    src: \"/icons/info.svg\",\n    alt: \"About us\",\n    className: \"my-icon btn-aboutUs\"\n  }), __jsx(\"div\", {\n    className: \"my-icon-end\"\n  }, __jsx(\"img\", {\n    src: \"/icons/four-square.png\",\n    alt: \"my books\",\n    className: \"my-icon\",\n    onClick: myProfile\n  }), __jsx(\"img\", {\n    src: \"/icons/plus.png\",\n    alt: \"Add book\",\n    className: \"my-icon\",\n    onClick: myBooks\n  }), __jsx(\"img\", {\n    src: \"/icons/search.png\",\n    alt: \"Search\",\n    className: \"my-icon\",\n    onClick: Search\n  }))), __jsx(\"div\", {\n    style: {\n      marginTop: '3%',\n      padding: '10px'\n    }\n  }, __jsx(\"p\", {\n    style: {\n      fontSize: '18px'\n    }\n  }, \"Here is all the information we have.\", __jsx(\"br\", null), __jsx(\"span\", {\n    style: {\n      fontSize: '16px'\n    }\n  }, \"Contact \", bookOwnerName, \" for more.\"))))), __jsx(\"div\", {\n    className: \"contact-item\"\n  }, booklist.map(function (book) {\n    //var imageBase64 = book.imageFront.contentType;\n    var imageData;\n\n    if (book.imageFront) {\n      imageData = book.imageFront.data;\n    } else {\n      console.log('no image');\n      imageData = '';\n    }\n\n    return __jsx(\"div\", {\n      key: book._id,\n      className: \"bookInfo\"\n    }, __jsx(\"div\", {\n      className: \"contact-bookinfo-pic\"\n    }, __jsx(\"img\", {\n      src: imageData,\n      className: \"contact-book-pic\"\n    })), __jsx(\"div\", {\n      className: \"contact-bookinfo-text\"\n    }, __jsx(\"p\", null, \"Title: \", __jsx(\"b\", null, book.title)), __jsx(\"p\", null, \"Author: \", __jsx(\"b\", null, book.author)), __jsx(\"p\", null, \"Owned by \", __jsx(\"b\", null, bookOwnerName)), __jsx(\"p\", null, \"Asking price: \", __jsx(\"b\", null, \"$\", book.price)), __jsx(\"p\", null, \"Posted on: \", __jsx(\"b\", null, book.postedOn))));\n  })), __jsx(\"button\", {\n    className: \"btn btn-primary email-btn\"\n  }, __jsx(\"a\", {\n    style: {\n      color: 'white'\n    },\n    href: sendTo\n  }, \"Contact \", bookOwnerName)), __jsx(\"br\", null), __jsx(\"br\", null));\n}); // Get content from database \n\ncontact.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var res, _yield$res$json, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log('ctx is');\n            console.log(ctx.query.bookOwnerID);\n            console.log(ctx.query.bookID);\n            _context.prev = 3;\n            _context.next = 6;\n            return fetch('https://usedbooksexchange.com/api/books', {\n              //const res = await fetch('http://localhost:3000/api/books', {\n              headers: {\n                title: '',\n                author: '',\n                id: ctx.query.bookOwnerID,\n                bookID: ctx.query.bookID\n              }\n            });\n\n          case 6:\n            res = _context.sent;\n            _context.next = 9;\n            return res.json();\n\n          case 9:\n            _yield$res$json = _context.sent;\n            data = _yield$res$json.data;\n            return _context.abrupt(\"return\", {\n              books: data\n            });\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](3);\n            return _context.abrupt(\"return\", {\n              books: []\n            });\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 14]]);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default contact;","map":null,"metadata":{},"sourceType":"module"}