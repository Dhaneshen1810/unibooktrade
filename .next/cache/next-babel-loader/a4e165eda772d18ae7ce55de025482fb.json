{"ast":null,"code":"import dbConnect from '../../../utils/dbConnect';\nimport Book from '../../../modals/book';\ndbConnect();\nexport default (async (req, res) => {\n  const {\n    method\n  } = req;\n  const myTitle = req.headers.title;\n  const myAuthor = req.headers.author;\n  console.log('title is ' + myTitle);\n  console.log('author is ' + myAuthor);\n\n  if (myTitle == '') {\n    console.log('No title');\n\n    switch (method) {\n      case 'GET':\n        try {\n          const books = await Book.find({\n            //Sort here\n            //'title': myTitle\n            'author': myAuthor\n          });\n          res.status(200).json({\n            success: true,\n            data: books\n          });\n        } catch (error) {\n          res.status(400).json({\n            success: false\n          });\n        }\n\n        break;\n\n      case 'POST':\n        try {\n          const book = await Book.create(req.body);\n          res.status(201).json({\n            success: true,\n            data: book\n          });\n        } catch (error) {\n          res.status(400).json({\n            success: false\n          });\n        }\n\n        break;\n\n      default:\n        res.status(400).json({\n          success: false\n        });\n        break;\n    }\n  } else if (myAuthor == '') {\n    console.log('No author');\n\n    switch (method) {\n      case 'GET':\n        try {\n          const books = await Book.find({\n            //Sort here\n            'title': myTitle //'author': 'Robert Kiyosaki'\n\n          });\n          res.status(200).json({\n            success: true,\n            data: books\n          });\n        } catch (error) {\n          res.status(400).json({\n            success: false\n          });\n        }\n\n        break;\n\n      case 'POST':\n        try {\n          const book = await Book.create(req.body);\n          res.status(201).json({\n            success: true,\n            data: book\n          });\n        } catch (error) {\n          res.status(400).json({\n            success: false\n          });\n        }\n\n        break;\n\n      default:\n        res.status(400).json({\n          success: false\n        });\n        break;\n    }\n  }\n  /*\r\n      switch(method){\r\n          case 'GET':\r\n              try {\r\n                  \r\n                  const books = await Book.find({\r\n                      //Sort here\r\n                      'title': myTitle\r\n                      //'author': 'Robert Kiyosaki'\r\n                  });\r\n                  \r\n  \r\n                  res.status(200).json({ success: true, data: books })\r\n              } catch (error) {\r\n                  res.status(400).json({ success: false });\r\n              }\r\n              \r\n              break;\r\n          case 'POST':\r\n              try {\r\n                  const book = await Book.create(req.body);\r\n  \r\n                  res.status(201).json({ success: true, data: book })\r\n              } catch (error) {\r\n                  res.status(400).json({ success: false });\r\n                  \r\n              }\r\n              break;\r\n          default:\r\n              res.status(400).json({ success: false });\r\n              break;\r\n      }\r\n      */\n\n});","map":{"version":3,"sources":["C:/Users/danmo/book-trade/pages/api/books/index.js"],"names":["dbConnect","Book","req","res","method","myTitle","headers","title","myAuthor","author","console","log","books","find","status","json","success","data","error","book","create","body"],"mappings":"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","sourcesContent":["import dbConnect from '../../../utils/dbConnect';\r\nimport Book from '../../../modals/book';\r\n\r\ndbConnect();\r\n\r\nexport default async (req, res) => {\r\n\r\n \r\n    const { method } = req;\r\n\r\n    const myTitle = req.headers.title;\r\n    const myAuthor = req.headers.author;\r\n\r\n    console.log('title is '+myTitle);\r\n    console.log('author is '+ myAuthor);\r\n\r\n    if (myTitle==''){\r\n        console.log('No title')\r\n\r\n        switch(method){\r\n            case 'GET':\r\n                try {\r\n                    \r\n                    const books = await Book.find({\r\n                        //Sort here\r\n                        //'title': myTitle\r\n                        'author': myAuthor\r\n                    });\r\n                    \r\n    \r\n                    res.status(200).json({ success: true, data: books })\r\n                } catch (error) {\r\n                    res.status(400).json({ success: false });\r\n                }\r\n                \r\n                break;\r\n            case 'POST':\r\n                try {\r\n                    const book = await Book.create(req.body);\r\n    \r\n                    res.status(201).json({ success: true, data: book })\r\n                } catch (error) {\r\n                    res.status(400).json({ success: false });\r\n                    \r\n                }\r\n                break;\r\n            default:\r\n                res.status(400).json({ success: false });\r\n                break;\r\n        }\r\n\r\n\r\n    }\r\n    else if (myAuthor==''){\r\n        console.log('No author');\r\n\r\n        switch(method){\r\n            case 'GET':\r\n                try {\r\n                    \r\n                    const books = await Book.find({\r\n                        //Sort here\r\n                        'title': myTitle\r\n                        //'author': 'Robert Kiyosaki'\r\n                    });\r\n                    \r\n    \r\n                    res.status(200).json({ success: true, data: books })\r\n                } catch (error) {\r\n                    res.status(400).json({ success: false });\r\n                }\r\n                \r\n                break;\r\n            case 'POST':\r\n                try {\r\n                    const book = await Book.create(req.body);\r\n    \r\n                    res.status(201).json({ success: true, data: book })\r\n                } catch (error) {\r\n                    res.status(400).json({ success: false });\r\n                    \r\n                }\r\n                break;\r\n            default:\r\n                res.status(400).json({ success: false });\r\n                break;\r\n        }\r\n    }\r\n    \r\n\r\n/*\r\n    switch(method){\r\n        case 'GET':\r\n            try {\r\n                \r\n                const books = await Book.find({\r\n                    //Sort here\r\n                    'title': myTitle\r\n                    //'author': 'Robert Kiyosaki'\r\n                });\r\n                \r\n\r\n                res.status(200).json({ success: true, data: books })\r\n            } catch (error) {\r\n                res.status(400).json({ success: false });\r\n            }\r\n            \r\n            break;\r\n        case 'POST':\r\n            try {\r\n                const book = await Book.create(req.body);\r\n\r\n                res.status(201).json({ success: true, data: book })\r\n            } catch (error) {\r\n                res.status(400).json({ success: false });\r\n                \r\n            }\r\n            break;\r\n        default:\r\n            res.status(400).json({ success: false });\r\n            break;\r\n    }\r\n    */\r\n}\r\n"]},"metadata":{},"sourceType":"module"}